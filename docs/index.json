{
  "MD/advanced-topics.html": {
    "href": "MD/advanced-topics.html",
    "title": "Advanced topics | Simple RPG Core",
    "keywords": "Advanced topics"
  },
  "MD/getting-started.html": {
    "href": "MD/getting-started.html",
    "title": "Getting Started | Simple RPG Core",
    "keywords": "Getting Started"
  },
  "MD/installation-instructions.html": {
    "href": "MD/installation-instructions.html",
    "title": "Installation instructions | Simple RPG Core",
    "keywords": "Installation instructions Requirements"
  },
  "MD/introduction.html": {
    "href": "MD/introduction.html",
    "title": "Introduction | Simple RPG Core",
    "keywords": "Introduction Whether you are creating a traditional RPG, a roguelike, an MMO, or even a game with unique mechanics, Simple RPG Core can adapt to your needs. By providing a robust framework for managing attributes, statistics, levels, classes, and more, it allows you to focus on the creative aspects of game development, simplifying the implementation of the more monotonous parts with a scalable and maintainable 100% inspector-driven experience. The possibilities are endless, unleash your creativity. Vocabulary of Simple RPG Core The package is developed around the concept of entity, so let's clarify what we mean by this term in the context of Simple RPG Core. In its most minimal version, an entity is a GameObject that has a set of statistics. Optionally, an entity can have attributes, can level up, and can have a class. Let's clarify what we mean by each mentioned term. Statistics (Stat) A statistic is a value that quantifies an aspect of the entity. The meaning of this aspect is solely due to the concept it refers to. Examples In an RPG, a statistic can be physical damage. The concept of physical damage refers the player to the amount of damage inflicted by physical attacks, whether with weapons or without. Other statistics can be ability power, defense, speed, armor penetration, range, etc. Attributes An attribute is a value that can influence the value of one or more statistics. The weight of its influence on the statistics can be variable. Examples In an RPG, attributes can be: strength, dexterity, intelligence, constitution, etc. Considering the previous example of statistics, strength could influence physical damage, dexterity would increase speed, intelligence would increase ability power, and constitution would increase defense. Experience and Level The entity can gain experience and level up. This functionality is used by the class to express how attributes and statistics grow with levels, for that particular class. Class The class is associated with a set of statistics and optionally a set of attributes. The class describes how statistics and attributes vary with levels. Examples In RPGs most common classes are: warrior, rogue, mage, paladin, and so on. These classes have different attribute values. For example, a warrior will have more strength and constitution than a mage. The rogue might have the highest dexterity, etc. How is Simple RPG Core organized and how does it work? Entity A GameObject becomes an entity once the EntityCore and EntityStats MonoBehaviours (Mono) are added to it. EntityCore comes with a built-in EntityLevel (plain C# class) that manages the experience and the level of the entity. Stat A Stat is a class that derives from ScriptableObject (SO) and represents a statistic in the game. Each statistic has a name (the name given to the SO instance of the created Stat), and we can choose whether to provide it with a maximum and/or minimum value. Additionally, we can define how that statistic grows or is reduced, depending on certain Attributes. StatSet A StatSet is a class that derives from SO and defines a set of Stats. EntityStats EntityStats allows us to configure: the base statistics the flat modifiers the StatToStat modifiers the percentage modifiers We will see what these modifiers are in the section (TODO). The base statistics can be fixed, or instead derive from a class if the entity has one assigned. If we use the fixed ones, we must also provide a StatSet, while if we use those of a class, the class's StatSet will be used. If the entity levels up and we want its statistics to grow with levels, we are forced to use a class, as the fixed statistics are immutable. Class Class derives from SO and represents a game class. Each class has a name, a GrowthFormula that defines how the base Max HP grows with levels, a StatSet, optionally an AttributeSet, and associates each Stat of the provided StatSet with a GrowthFormula that describes how the statistic varies with levels. Similarly, if an AttributeSet is provided, it will be possible to associate a GrowthFormula for each Attribute present in the set, to describe how the attributes vary with levels. EntityClass EntityClass derives from Mono and allows us to assign a Class to our entity. Attribute An Attribute is a class that derives from SO and represents an attribute in the game. Each attribute has a name and, like statistics, can have a maximum and minimum value. AttributeSet An AttributeSet is a class that derives from SO and defines a set of Attributes. EntityAttributes Optionally, we can add the Mono EntityAttributes to our entity if we want to give it attributes. EntityAttributes allows us to specify how many attribute points to provide at each new level. These points can be spent on various attributes to increase their value. For EntityAttributes we can configure: the base attributes the flat modifiers the percentage modifiers Similarly to EntityStats, we can decide whether the base attributes are fixed or if they instead derive from the class associated with EntityClass. Growth Formula To express how Stats, Attributes, Max HP, and the experience required to level up vary at each level, we can use instances of GrowthFormula. This is a class that derives from SO and allows us to define a mathematical function, or a system of functions, that describe how a value changes as levels increase. We will see in more detail how to define a GrowthFormula in (TODO). How is Simple RPG Core implemented? The package is developed following the principles of SOAP (Scriptable Object Architecture Pattern), and has been inspired by the GDC talk of Ryan Hipple. In a nutshell, the main benefits provided by this architecture are: encapsulation: separation of game logic from data. Game logic code shouldn't mix with data. All data is nicely wrapped withing SO instances game designers friendly: game designers can make changes and balancements from the inspector without touching the code greater reusability: Each object is a ScriptableObject that can be reused by many components greater testability: being data separated from code, is easier to isolate and fix bugs. Moreover, SO events can be raised with ease at the press of a button from the inspector interface, easing and speeding up debugging even further. Flexibility of Simple RPG Core Although the package is specifically designed for RPG games or games with progression systems, its flexibility allows it to be used in almost any game. As it allows creating attributes like strength, dexterity, agility, etc., and statistics such as physical attack, magic power, physical defense, etc., in RPG, Roguelike, MMO games, etc., nothing prevents it from being used, for example, to implement a firearm. The attributes could be weight, size, ergonomics, etc., and the statistics recoil, handling, stability, intimidation, etc. Attributes can influence statistics. A heavier weapon could reduce handling but increase stability. A larger weapon could reduce handling but increase intimidation. A more ergonomic weapon could reduce recoil and increase handling. And so on... The weapon's levels, if present, influence the attributes and statistics, progressively improving them. Classes could represent weapon types (assault rifles, snipers, shotguns, etc.), and each class could have its own set of dedicated attributes and statistics. For example, shotguns could have, in addition to the aforementioned ones, the barrel length attribute that influences the pellet spread statistic."
  },
  "MD/limitations.html": {
    "href": "MD/limitations.html",
    "title": "| Simple RPG Core",
    "keywords": ""
  },
  "MD/package-contents.html": {
    "href": "MD/package-contents.html",
    "title": "Package contents | Simple RPG Core",
    "keywords": "Package contents"
  },
  "MD/samples.html": {
    "href": "MD/samples.html",
    "title": "Samples | Simple RPG Core",
    "keywords": "Samples"
  },
  "MD/workflows.html": {
    "href": "MD/workflows.html",
    "title": "Workflows | Simple RPG Core",
    "keywords": "Workflows Mandatory and re-play fields Fields marked with a red asterisk (*) are mandatory and must be filled out to ensure proper functionality of the framework. Fields marked with an orange R are re-play fields. Any changes made to these fields during playtime will require a restart to ensure the changes take effect. Some utilities Almost every class provided by this package uses events or variables in the form of ScriptableObject. Therefore, let's quickly introduce these concepts so that we are clear about what we are talking about when we encounter them in the following paragraphs. Game events as ScriptableObjects The SOAP architecture allows us to implement the Observer pattern through scriptable objects. In the simplest case, with events without context, we can define various game events as GameEvent instances: a class that derives from ScriptableObject. For example, we can create an instance called PlayerJumped that represents the event \"The player has jumped\". This event will notify all listening systems when it occurs. Systems subscribe to this event using the MonoBehaviour GameEventListener. We can assign a GameEvent to this component, and it will handle the subscription and invoke a callback when the event is triggered. The callback is a UnityEvent, so we can select a callback to invoke in response to our event directly from the inspector. For more details, see the Game Events section. Int and Long Vars Another common use of ScriptableObject in the SOAP architecture is to define variables. The main advantage of these variables in the form of SO is that they can be easily shared between various objects that may decide to share the same value. A common example is the player's game score. There could be a game manager that adds or removes points from this variable, while the UI HUD uses it to display its value on the screen. This way, we can keep the game manager and UI completely decoupled, passing shared values (like variables) through the inspector. Int and Long Refs IntRef and LongRef allow choosing whether to use a native value (int or long) or an IntVar/LongVar. As mentioned in the previous paragraph, IntVar and LongVar have the advantage of being shareable between different components/game objects, while native values are more immediate to use and require less setup (no need to instantiate an IntVar/LongVar and assign it in the inspector). Make a GameObject an entity To make a GameObject an entity, we need to add the MonoBehaviour EntityCore to it. Select your object from the hierarchy and click, in the inspector, on \"Add component\". Then search for and select EntityCore. (TODO) Add image of the entity core From the inspector, we can configure a series of values. Let's analyze them one by one. Level: defines the level of the entity. By changing its value, we can assign a different level to the entity directly from the inspector. This can be useful for testing purposes. You will notice the Use Constant checkbox. If checked, you can pass an IntVar instead of using a constant. Current Total Experience: Represents the total experience possessed by the entity. This value cannot be modified. Growth Formulas As already mentioned in Introduction, GrowthFormula allows defining how a certain value varies as levels increase. A GrowthFormula can be instantiated through the hierarchy context menu by going to Simple RPG Core -> Growth Formula. The package provides a custom property drawer for GrowthFormula. For more details, see the Growth Formulas section. Make a GameObject an entity To make a GameObject an entity, we need to add the MonoBehaviour EntityCore to it. Select your object from the hierarchy and click, in the inspector, on \"Add component\". Then search for and select EntityCore. (TODO) Add image of the entity core From the inspector, we can configure a series of values. Let's analyze them one by one. Level: defines the level of the entity. By changing its value, we can assign a different level to the entity directly from the inspector. This can be useful for testing purposes. You will notice the Use Constant checkbox. If checked, you can pass an IntVar instead of using a constant. Current Total Experience: Represents the total experience possessed by the entity. Being this a LongRef, you can choose whether to use a const value (a native long), or a LongVar instead. Game events The package also supports game events with up to 4 context parameters. They are generics, but in Unity, it is not possible to instantiate classes that derive from ScriptableObject if they are generics with unspecified type parameters. To use them, we must explicitly declare classes that derive from the generic GameEvent and fix the type parameters with concrete types. To simplify the definition of new event types, with specific types as context parameters, the package provides GameEventGenerator. These generators, which derive from SO, allow generating the concrete classes of GameEvent. We will see these generators in more detail in the section (TODO). Some game events are already defined and made available by the package (see the Samples page). Int and Long Vars Int and Long Refs IntRef and LongRef allow choosing whether to use a native value (int or long) or an IntVar/LongVar. As mentioned in the previous paragraph, IntVar and LongVar have the advantage of being shareable between different components/game objects, while native values are more immediate to use and require less setup (no need to instantiate an IntVar/LongVar and assign it in the inspector). Thanks to a custom property drawer, it will be possible, from the inspector, to check a checkbox named Use constant to use a native value instead of a Ref, and vice versa. IntRef and LongRef are widely used in the package's MonoBehaviour. Growth Formulas As already mentioned in Introduction, GrowthFormula allows defining how a certain value varies as levels increase. A GrowthFormula can be instantiated through the hierarchy context menu by going to Simple RPG Core -> Growth Formula. The package provides a custom property drawer for GrowthFormula. Max level for the values In the inspector of a GrowthFormula, we can pass an IntVar to define up to which level to grow the values. Use constant at level one If the checkbox named Use constant value at level 1 is checked, the respective constant value will be used. Growth equations The various values of the GrowthFormula are defined by a function where values, the y-axis, are expressed in function of the levels, the x-axis. Such function is defined as a system of equations. Each equation is a string that associates a math expression to a range of levels. The string can be defined by using the Unity ExpressionEvaluator syntax. On top of it, the following terms can be used: LVL: the level at each iteration PRV: the previous value of the GrowthFormula (value evaluated at the previous level) SPRV: the second previous value of the GrowthFormula (value evaluated 2 levels ago) SUM: the sum of the values of the GrowthFormula from level 1 up to the previous level Make a GameObject an entity To make a GameObject an entity, we need to add the MonoBehaviour EntityCore to it. Select your object from the hierarchy and click, in the inspector, on \"Add component\". Then search for and select EntityCore. Image - Entity Core Custom Editor From the inspector, we can configure several values. Let's analyze them one by one. Level: defines the entity's level. By changing its value, we can assign a different level to the entity directly from the inspector. This can be useful for testing purposes. You'll notice the Use Constant checkbox. If checked, you can pass an IntVar instead of using a constant. Current Total Experience: Represents the total experience possessed by the entity. Warning If you've passed a LongRef for the current total experience, the value contained in this variable should not be modified manually. If Use constant is checked instead, the value is readonly. Max Level: The maximum level the entity can reach Experience Formula: GrowthFormula that describes how the total experience required to reach the next level grows at each level. On Level Up: IntGameEvent that should be raised when the entity levels up. Spawned Entity Event: EntityCoreGameEvent that should be raised when this entity's Start() method is executed. You may notice that a game event is already assigned to Spawned Entity Event. This is because an instance of that game event has been explicitly assigned directly in the inspector of the EntityCore script. This choice was made since in most cases the same event instance will always be used for entity spawning. This means you don't have to reassign this event every time you create a new entity in Unity. As we'll see later, this default assignment mechanism has been used for other components as well. Creating Simple RPG Core assets All the instances of the various assets that derive from ScriptableObjects can be created in the following ways: Context menu: Right click on the hierarchy > Create > Simple RPG Core Top bar: Assets > Create > Simple RPG Core Hotkeys: By pressing the respective keyboard shortcut while a folder or an element of the hierarchy is currently selected Note For Mac users the Ctrl key corresponds to the Cmd key. Create attributes Keyboard shortcut: Ctrl + Alt + A Relative path: Attribute Once created a new attribute you can name it as you wish and you'll be able tweak some settings in the inspector. For example lets create a Strength attribute. Create an Attributes folder in your hierarchy, then press A and name the newly created attribute Strength. In the inspector it should look like: By checking Has Max Value, we will set a maximum value for the attribute. By default, there is no maximum value. By checking Has Min Value, we will set a minimum value for the attribute. By default, the minimum value is zero. Repeat the process for also the Constitution, Intelligence, and Dexterity attributes. Create an attribute set Relative path: Attribute Set Now that we have some attributes let's create an AttributeSet named, for example, Hero Attribute Set. In the inspector it should look like this: An attribute set without attributes isn't very useful, so let's add the previously created ones, one at a time. To do this, click on the Add button. Notice that an entry with None (Attribute) appears: To assign an attribute to the entry, we can either drag & drop from the hierarchy or click on the small circle button on the right of the newly appeared entry. This mechanism is the same used for public variables or, more generally, for fields annotated with SerializeField, so it will be familiar to you. Let's add Strength using whichever method you prefer. Repeat the process of adding an attribute to the set for Constitution, Intelligence, and Dexterity as well. If you want to remove an attribute from the set, you can click on the small - button on the right of the attribute you want to remove. Add EntityAttributes to an entity The next step is to assign the attribute set we created to an entity. To do this, let's add the EntityAttributes component to our game object. The inspector will look like this: An entity has base points for attributes, which can be either fixed or derived from a class, a configurable amount of attribute points that can be arbitrarily assigned, and these points are granted at each level-up, along with flat and percentage modifiers for the attributes. Except for the modifiers, which can only be assigned via code, all other values can be configured from the inspector. Attr Points Per Level defines how many arbitrarily spendable attribute points are provided at each level-up. They are assigned starting from level 2 on. Attribute Points Tracker allows monitoring and assigning spendable points. Available Points defines how many unspent points are still available. If you change the level of the entity you'll see that available points change accordingly. And as you spend them, Available Points will decrease. Moreover, there is a checkbox labeled Use Class Base Attributes. For now, let's leave it unchecked since we haven't added a class yet. However, in this case, we need to manually assign an attribute set. Therefore, let's set the Attribute Set field found under Fixed Base Attributes with the Hero Attribute Set. By doing this, we now have access to additional fields in the inspector: We can assign values to the attributes of Fixed Base Attributes as we see fit. Adding Modifiers While base attributes are set in the inspector, modifiers can be added through code using these methods: // Add flat bonus entityAttributes.AddFlatModifier(attribute, value); // Adds fixed amount // Add percentage bonus entityAttributes.AddPercentageModifier(attribute, percentage); The modifiers are applied in this order: Base value Spent attribute points Flat modifiers Percentage modifiers For example, with: Base Strength: 10 2 spent points Flat modifier: +3 40% Strength increase The final calculation would be: Base (10) + Spent (+2) = 12 12 + (Flat) + 3 = 15 15 + (15 * 0.4) = 21 When adding modifiers through code, the attribute cache will automatically be invalidated to ensure the correct value is returned on the next access. Create stats Keyboard shortcut: Ctrl + Alt + S Relative path: Stat As with attributes, you can create stats as you wish and assign them the names you prefer. Let's create the Physical Attack stat together. Create a new Stats folder, select it and press S. Name it Physical Attack. In the inspector, it should look like this: As with attributes, you can assign both a maximum and a minimum value to a stat. Repeat the process for the Magical Power, Defense, and Critical Chance stats. Unlike attributes, however, stats include Attributes Scaling. Create an Attribute Scaling Component for Stats Relative path: Scaling -> Attribute Scaling Component Let's create a new Attribute Scaling Component to use with the strength stat we created earlier. Create a new folder named, for example, Attribute Scalings for Stats, and inside it, create an attribute scaling component called Physical Attack Strength Scaling. Assign the previously created Hero Attribute Set to the Set field. You will see the attributes of the set appear. Here, you can assign scaling values using double. For example, set the scaling of Strength to 1.0. This component defines a 100% scaling on the value of Strength. Now, assign this scaling component to the Physical Attack stat to ensure it scales with the Strength attribute. Create a stat set Relative path: Stat Set Now that we have some stats, let's create a StatSet named, for example, Hero Stat Set. A stat set without stats isn't very useful, so let's add the previously created ones, one at a time. To do this, click on the Add button. Notice that an entry with None (Stat) appears. To assign a stat to the entry, we can either drag & drop from the hierarchy or click on the small circle button on the right of the newly appeared entry. This mechanism is the same used for public variables or, more generally, for fields annotated with SerializeField, so it will be familiar to you. Let's add Physical Attack using whichever method you prefer. Repeat the process of adding a stat to the set for Magical Power, Defense, and Critical Chance as well. The stat set should look like: If you want to remove a stat from the set, you can click on the small - button on the right of the stat you want to remove. Add EntityStats to an Entity The next step is to assign the stat set we created to an entity. To do this, let's add the EntityStats component to our game object. The inspector will look like this: An entity has base stats that can be either fixed or derived from a class. Additionally, stats can be modified through flat modifiers, stat-to-stat modifiers, and percentage modifiers. Use Class Base Stats checkbox determines whether the base stats should come from the entity's class (if one is available) or from fixed values defined in the inspector. For now, let's leave it unchecked since we haven't added a class yet. With Use Class Base Stats unchecked, we need to manually assign a stat set. Set the Stat Set field under Fixed Base Stats with our Hero Stat Set. This will reveal additional fields in the inspector where we can set the base values for each stat: On Stat Changed event gets raised whenever any stat value changes due to modifiers. You can use this to update UI elements or trigger other game logic. Use Cache enables caching of final stat values. This is useful for performance when you have many entities or complex stat calculations. Adding Modifiers While base stats are set in the inspector, modifiers can be added through code using these methods: // Add flat bonus entityStats.AddFlatModifier(stat, value); // Adds fixed amount // Add stat-to-stat scaling entityStats.AddStatToStatModifer(targetStat, sourceStat, percentage); // Add percentage bonus entityStats.AddPercentageModifier(stat, percentage); The modifiers are applied in this order: Base value Flat modifiers Stat-to-stat modifiers Percentage modifiers For example, with: Base Physical Attack: 100 Flat modifier: +20 50% of Strength (value 40) as Physical Attack 25% Physical Attack increase The final calculation would be: Base (100) + Flat (+20) = 120 120 + (40 * 0.5) = 140 140 + (140 * 0.25) = 175 When adding modifiers through code, the OnStatChanged event will automatically be raised if the final value changes."
  },
  "api/ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils.Cache-2.html": {
    "href": "api/ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils.Cache-2.html",
    "title": "Class Cache<KType, VType> | Simple RPG Core",
    "keywords": "Class Cache<KType, VType> Namespace ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll A generic cache class that provides basic caching functionality. public class Cache<KType, VType> Type Parameters KType The type of the keys in the cache. VType The type of the values in the cache. Inheritance object Cache<KType, VType> Properties this[KType] Gets or sets the value for the specified key in the cache. public VType this[KType key] { get; set; } Parameters key KType The key of the item to get or set. Property Value VType The value associated with the specified key. Methods Get(KType) Gets the value for the specified key from the cache. If the key is not found, a KeyNotFoundException is thrown. public VType Get(KType key) Parameters key KType The key of the item to get. Returns VType The value associated with the specified key. Exceptions KeyNotFoundException Thrown when the key is not found in the cache. Has(KType) Determines whether the cache contains an item with the specified key. public bool Has(KType key) Parameters key KType The key to locate in the cache. Returns bool true if the cache contains an item with the key; otherwise, false. Invalidate(KType) Invalidates the cache item for the specified key. If key is not found, nothing happens. public void Invalidate(KType key) Parameters key KType The key of the item to invalidate. InvalidateAll() Invalidates all items in the cache. public void InvalidateAll() Set(KType, VType) Sets the value for the specified key in the cache. UPSERT operation. public void Set(KType key, VType value) Parameters key KType The key of the item to set. value VType The value to set for the specified key. TryGet(KType, out VType) Tries to get the value for the specified key from the cache. public bool TryGet(KType key, out VType value) Parameters key KType The key of the item to get. value VType When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. Returns bool true if the cache contains an item with the specified key; otherwise, false."
  },
  "api/ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils.html": {
    "href": "api/ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils.html",
    "title": "Namespace ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRPGCore.SimpleRpgCore.Utils Classes Cache<KType, VType> A generic cache class that provides basic caching functionality."
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.Attribute.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.Attribute.html",
    "title": "Class Attribute | Simple RPG Core",
    "keywords": "Class Attribute Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class Attribute : BoundedValue Inheritance object Object ScriptableObject BoundedValue Attribute Inherited Members BoundedValue.HasMaxValue BoundedValue.MaxValue BoundedValue.HasMinValue BoundedValue.MinValue"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeMenuItems.html",
    "title": "Class AttributeMenuItems | Simple RPG Core",
    "keywords": "Class AttributeMenuItems Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class AttributeMenuItems Inheritance object AttributeMenuItems Methods CreateAttribute() [MenuItem(\"Assets/Create/Simple RPG Core/Attribute ^&A\", false, 0)] public static void CreateAttribute()"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.AttributePointsTracker.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.AttributePointsTracker.html",
    "title": "Class AttributePointsTracker | Simple RPG Core",
    "keywords": "Class AttributePointsTracker Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class AttributePointsTracker Inheritance object AttributePointsTracker Properties Available public int Available { get; } Property Value int SpentAttributesKeys public Dictionary<Attribute, int>.KeyCollection SpentAttributesKeys { get; } Property Value Dictionary<Attribute, int>.KeyCollection Methods AddPoints(int) public void AddPoints(int amount) Parameters amount int GetSpentOn(Attribute) public long GetSpentOn(Attribute attribute) Parameters attribute Attribute Returns long Refund(Attribute) public void Refund(Attribute attribute) Parameters attribute Attribute Refund(Attribute, int) public void Refund(Attribute attribute, int amount) Parameters attribute Attribute amount int RefundAll() public void RefundAll() SpendOn(Attribute, int) public void SpendOn(Attribute attribute, int amount) Parameters attribute Attribute amount int"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSet.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSet.html",
    "title": "Class AttributeSet | Simple RPG Core",
    "keywords": "Class AttributeSet Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class AttributeSet : ScriptableObject, IAttributeContainer Inheritance object Object ScriptableObject AttributeSet Implements IAttributeContainer Properties Attributes public IReadOnlyList<Attribute> Attributes { get; } Property Value IReadOnlyList<Attribute> Methods Contains(Attribute) public bool Contains(Attribute attribute) Parameters attribute Attribute Returns bool Get(Attribute) public Attribute Get(Attribute attribute) Parameters attribute Attribute Returns Attribute"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSetInstance.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSetInstance.html",
    "title": "Class AttributeSetInstance | Simple RPG Core",
    "keywords": "Class AttributeSetInstance Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class AttributeSetInstance : IAttributeContainer Inheritance object AttributeSetInstance Implements IAttributeContainer Constructors AttributeSetInstance(AttributeSet) public AttributeSetInstance(AttributeSet attrSet) Parameters attrSet AttributeSet Properties Attributes public Dictionary<Attribute, long> Attributes { get; } Property Value Dictionary<Attribute, long> this[Attribute] public long this[Attribute attribute] { get; set; } Parameters attribute Attribute Property Value long Methods AddValue(Attribute, long) public void AddValue(Attribute attribute, long value) Parameters attribute Attribute value long Clone() public AttributeSetInstance Clone() Returns AttributeSetInstance Contains(Attribute) public bool Contains(Attribute stat) Parameters stat Attribute Returns bool Get(Attribute) public long Get(Attribute attribute) Parameters attribute Attribute Returns long GetAsPercentage(Attribute) public Percentage GetAsPercentage(Attribute stat) Parameters stat Attribute Returns Percentage GetEnumerator() public IEnumerator<KeyValuePair<Attribute, long>> GetEnumerator() Returns IEnumerator<KeyValuePair<Attribute, long>> Operators operator +(AttributeSetInstance, AttributeSetInstance) public static AttributeSetInstance operator +(AttributeSetInstance a, AttributeSetInstance b) Parameters a AttributeSetInstance b AttributeSetInstance Returns AttributeSetInstance explicit operator AttributeSetInstance(SerializableDictionary<Attribute, long>) public static explicit operator AttributeSetInstance(SerializableDictionary<Attribute, long> dictionary) Parameters dictionary SerializableDictionary<Attribute, long> Returns AttributeSetInstance"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSetInstanceExtensions.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSetInstanceExtensions.html",
    "title": "Class AttributeSetInstanceExtensions | Simple RPG Core",
    "keywords": "Class AttributeSetInstanceExtensions Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class AttributeSetInstanceExtensions Inheritance object AttributeSetInstanceExtensions Methods ToAttributeSetInstance(SerializableDictionary<Attribute, long>, AttributeSet) public static AttributeSetInstance ToAttributeSetInstance(this SerializableDictionary<Attribute, long> dictionary, AttributeSet attributeSet) Parameters dictionary SerializableDictionary<Attribute, long> attributeSet AttributeSet Returns AttributeSetInstance"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSetMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.AttributeSetMenuItems.html",
    "title": "Class AttributeSetMenuItems | Simple RPG Core",
    "keywords": "Class AttributeSetMenuItems Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class AttributeSetMenuItems Inheritance object AttributeSetMenuItems Methods CreateAttributeSet() [MenuItem(\"Assets/Create/Simple RPG Core/Attribute Set\", false, 1)] public static void CreateAttributeSet()"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.EntityAttributes.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.EntityAttributes.html",
    "title": "Class EntityAttributes | Simple RPG Core",
    "keywords": "Class EntityAttributes Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [RequireComponent(typeof(EntityCore))] public class EntityAttributes : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour EntityAttributes Properties AttributeSet public virtual AttributeSet AttributeSet { get; } Property Value AttributeSet AttributesCache public Cache<Attribute, long> AttributesCache { get; } Property Value Cache<Attribute, long> EntityClass public IClassSource EntityClass { get; } Property Value IClassSource FlatModifiers protected virtual AttributeSetInstance FlatModifiers { get; } Property Value AttributeSetInstance PercentageModifiers protected virtual AttributeSetInstance PercentageModifiers { get; } Property Value AttributeSetInstance Methods AddFlatModifier(Attribute, long) public void AddFlatModifier(Attribute attribute, long value) Parameters attribute Attribute value long AddPercentageModifier(Attribute, Percentage) public void AddPercentageModifier(Attribute attribute, Percentage value) Parameters attribute Attribute value Percentage Get(Attribute) public long Get(Attribute attribute) Parameters attribute Attribute Returns long GetBase(Attribute) public long GetBase(Attribute attribute) Parameters attribute Attribute Returns long SpendOn(Attribute, int) public void SpendOn(Attribute attribute, int amount) Parameters attribute Attribute amount int"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.IAttributeContainer.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.IAttributeContainer.html",
    "title": "Interface IAttributeContainer | Simple RPG Core",
    "keywords": "Interface IAttributeContainer Namespace ElectricDrill.SimpleRpgCore.Attributes Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IAttributeContainer Methods Contains(Attribute) bool Contains(Attribute attribute) Parameters attribute Attribute Returns bool"
  },
  "api/ElectricDrill.SimpleRpgCore.Attributes.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Attributes.html",
    "title": "Namespace ElectricDrill.SimpleRpgCore.Attributes | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRpgCore.Attributes Classes Attribute AttributeMenuItems AttributePointsTracker AttributeSet AttributeSetInstance AttributeSetInstanceExtensions AttributeSetMenuItems EntityAttributes Interfaces IAttributeContainer"
  },
  "api/ElectricDrill.SimpleRpgCore.BoundedValue.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.BoundedValue.html",
    "title": "Class BoundedValue | Simple RPG Core",
    "keywords": "Class BoundedValue Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class BoundedValue : ScriptableObject Inheritance object Object ScriptableObject BoundedValue Derived Attribute Stat Properties HasMaxValue public bool HasMaxValue { get; } Property Value bool HasMinValue public bool HasMinValue { get; } Property Value bool MaxValue public long MaxValue { get; } Property Value long MinValue public int MinValue { get; } Property Value int"
  },
  "api/ElectricDrill.SimpleRpgCore.Class.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Class.html",
    "title": "Class Class | Simple RPG Core",
    "keywords": "Class Class Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class Class : ScriptableObject, IStatSetSource Inheritance object Object ScriptableObject Class Implements IStatSetSource Fields _maxHpGrowthFormula [SerializeField] protected GrowthFormula _maxHpGrowthFormula Field Value GrowthFormula _statSet [SerializeField] protected StatSet _statSet Field Value StatSet attributeSet [SerializeField] protected AttributeSet attributeSet Field Value AttributeSet Properties AttributeSet public virtual AttributeSet AttributeSet { get; } Property Value AttributeSet StatSet public virtual StatSet StatSet { get; } Property Value StatSet Methods GetAttributeAt(Attribute, int) public virtual long GetAttributeAt(Attribute attribute, int level) Parameters attribute Attribute level int Returns long GetMaxHpAt(int) public long GetMaxHpAt(int level) Parameters level int Returns long GetStatAt(Stat, int) public virtual long GetStatAt(Stat stat, int level) Parameters stat Stat level int Returns long"
  },
  "api/ElectricDrill.SimpleRpgCore.ClassMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.ClassMenuItems.html",
    "title": "Class ClassMenuItems | Simple RPG Core",
    "keywords": "Class ClassMenuItems Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class ClassMenuItems Inheritance object ClassMenuItems Methods CreateClass() [MenuItem(\"Assets/Create/Simple RPG Core/Class\", false, 5)] public static void CreateClass()"
  },
  "api/ElectricDrill.SimpleRpgCore.EntityClass.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.EntityClass.html",
    "title": "Class EntityClass | Simple RPG Core",
    "keywords": "Class EntityClass Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class EntityClass : MonoBehaviour, IClassSource Inheritance object Object Component Behaviour MonoBehaviour EntityClass Implements IClassSource Properties Class public Class Class { get; } Property Value Class Operators implicit operator Class(EntityClass) public static implicit operator Class(EntityClass entityClass) Parameters entityClass EntityClass Returns Class"
  },
  "api/ElectricDrill.SimpleRpgCore.EntityCore.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.EntityCore.html",
    "title": "Class EntityCore | Simple RPG Core",
    "keywords": "Class EntityCore Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class EntityCore : MonoBehaviour, ILevel, IAttributes Inheritance object Object Component Behaviour MonoBehaviour EntityCore Implements ILevel IAttributes Properties Attributes public virtual EntityAttributes Attributes { get; } Property Value EntityAttributes Level public virtual EntityLevel Level { get; } Property Value EntityLevel Name public string Name { get; } Property Value string Stats public virtual EntityStats Stats { get; } Property Value EntityStats Methods Awake() protected virtual void Awake() Start() protected virtual void Start() Update() protected virtual void Update()"
  },
  "api/ElectricDrill.SimpleRpgCore.EntityLevel.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.EntityLevel.html",
    "title": "Class EntityLevel | Simple RPG Core",
    "keywords": "Class EntityLevel Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class EntityLevel : ILevelable Inheritance object EntityLevel Implements ILevelable Properties CurrentTotalExperience public long CurrentTotalExperience { get; } Property Value long Level public virtual int Level { get; set; } Property Value int OnLevelUp public virtual Action<int> OnLevelUp { get; set; } Property Value Action<int> Methods AddExp(long) public void AddExp(long amount) Parameters amount long CurrentLevelTotalExperience() public long CurrentLevelTotalExperience() Returns long NextLevelTotalExperience() public long NextLevelTotalExperience() Returns long SetTotalCurrentExp(long) public void SetTotalCurrentExp(long totalCurrentExperience) Parameters totalCurrentExperience long ValidateExperience() public void ValidateExperience() Operators implicit operator int(EntityLevel) public static implicit operator int(EntityLevel entityLevel) Parameters entityLevel EntityLevel Returns int"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.EntityCoreGameEvent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.EntityCoreGameEvent.html",
    "title": "Class EntityCoreGameEvent | Simple RPG Core",
    "keywords": "Class EntityCoreGameEvent Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [CreateAssetMenu(fileName = \"EntityCore Game Event\", menuName = \"Simple RPG Core/Events/Generated/EntityCore\")] public class EntityCoreGameEvent : GameEventGeneric1<EntityCore>, IRaisable<EntityCore> Inheritance object Object ScriptableObject GameEventGeneric1<EntityCore> EntityCoreGameEvent Implements IRaisable<EntityCore> Inherited Members GameEventGeneric1<EntityCore>.OnEventRaised GameEventGeneric1<EntityCore>.Raise(EntityCore) GameEventGeneric1<EntityCore>.RegisterListener(GameEventListenerGeneric1<EntityCore>) GameEventGeneric1<EntityCore>.UnregisterListener(GameEventListenerGeneric1<EntityCore>)"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.EntityCoreGameEventListener.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.EntityCoreGameEventListener.html",
    "title": "Class EntityCoreGameEventListener | Simple RPG Core",
    "keywords": "Class EntityCoreGameEventListener Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class EntityCoreGameEventListener : GameEventListenerGeneric1<EntityCore> Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric1<EntityCore> EntityCoreGameEventListener Inherited Members GameEventListenerGeneric1<EntityCore>._event GameEventListenerGeneric1<EntityCore>._response GameEventListenerGeneric1<EntityCore>.OnEventRaised(EntityCore)"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEvent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEvent.html",
    "title": "Class GameEvent | Simple RPG Core",
    "keywords": "Class GameEvent Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [CreateAssetMenu(fileName = \"New Game Event\", menuName = \"Simple RPG Core/Events/Game Event\")] public class GameEvent : ScriptableObject Inheritance object Object ScriptableObject GameEvent Methods Raise() public void Raise() RegisterListener(GameEventListener) public void RegisterListener(GameEventListener listener) Parameters listener GameEventListener UnregisterListener(GameEventListener) public void UnregisterListener(GameEventListener listener) Parameters listener GameEventListener"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.EventParameter.NativeType.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.EventParameter.NativeType.html",
    "title": "Enum GameEventGenerator.EventParameter.NativeType | Simple RPG Core",
    "keywords": "Enum GameEventGenerator.EventParameter.NativeType Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public enum GameEventGenerator.EventParameter.NativeType Fields bool = 3 float = 2 int = 0 long = 1"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.EventParameter.ParameterType.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.EventParameter.ParameterType.html",
    "title": "Enum GameEventGenerator.EventParameter.ParameterType | Simple RPG Core",
    "keywords": "Enum GameEventGenerator.EventParameter.ParameterType Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public enum GameEventGenerator.EventParameter.ParameterType Fields MonoScript = 1 Native = 0"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.EventParameter.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.EventParameter.html",
    "title": "Class GameEventGenerator.EventParameter | Simple RPG Core",
    "keywords": "Class GameEventGenerator.EventParameter Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class GameEventGenerator.EventParameter Inheritance object GameEventGenerator.EventParameter Fields monoScript public MonoScript monoScript Field Value MonoScript nativeType public GameEventGenerator.EventParameter.NativeType nativeType Field Value GameEventGenerator.EventParameter.NativeType parameterType public GameEventGenerator.EventParameter.ParameterType parameterType Field Value GameEventGenerator.EventParameter.ParameterType"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.GameEventDefinition.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.GameEventDefinition.html",
    "title": "Class GameEventGenerator.GameEventDefinition | Simple RPG Core",
    "keywords": "Class GameEventGenerator.GameEventDefinition Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class GameEventGenerator.GameEventDefinition Inheritance object GameEventGenerator.GameEventDefinition Fields documentation [HideInInspector] public string documentation Field Value string eventName public string eventName Field Value string isGenerated [HideInInspector] public bool isGenerated Field Value bool parameters public List<GameEventGenerator.EventParameter> parameters Field Value List<GameEventGenerator.EventParameter>"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGenerator.html",
    "title": "Class GameEventGenerator | Simple RPG Core",
    "keywords": "Class GameEventGenerator Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [CreateAssetMenu(fileName = \"GameEventGenerator\", menuName = \"Simple RPG Core/Tools/GameEventGenerator\")] public sealed class GameEventGenerator : ScriptableObject Inheritance object Object ScriptableObject GameEventGenerator Fields baseSaveLocation public string baseSaveLocation Field Value string eventsToGenerate public List<GameEventGenerator.GameEventDefinition> eventsToGenerate Field Value List<GameEventGenerator.GameEventDefinition> menuBasePath public string menuBasePath Field Value string rootNamespace public string rootNamespace Field Value string Methods GenerateGameEvents() public void GenerateGameEvents() RemoveGeneratedEventFiles(string, int) public void RemoveGeneratedEventFiles(string eventName, int parameterCount) Parameters eventName string parameterCount int"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric1-1.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric1-1.html",
    "title": "Class GameEventGeneric1<T> | Simple RPG Core",
    "keywords": "Class GameEventGeneric1<T> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class GameEventGeneric1<T> : ScriptableObject, IRaisable<T> Type Parameters T Inheritance object Object ScriptableObject GameEventGeneric1<T> Implements IRaisable<T> Derived EntityCoreGameEvent IntGameEvent StatChangedGameEvent Methods Raise(T) public void Raise(T context) Parameters context T RegisterListener(GameEventListenerGeneric1<T>) public void RegisterListener(GameEventListenerGeneric1<T> listener) Parameters listener GameEventListenerGeneric1<T> UnregisterListener(GameEventListenerGeneric1<T>) public void UnregisterListener(GameEventListenerGeneric1<T> listener) Parameters listener GameEventListenerGeneric1<T> Events OnEventRaised public event Action<T> OnEventRaised Event Type Action<T>"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric2-2.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric2-2.html",
    "title": "Class GameEventGeneric2<T, U> | Simple RPG Core",
    "keywords": "Class GameEventGeneric2<T, U> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class GameEventGeneric2<T, U> : ScriptableObject, IRaisable<T, U> Type Parameters T U Inheritance object Object ScriptableObject GameEventGeneric2<T, U> Implements IRaisable<T, U> Methods Raise(T, U) public void Raise(T context1, U context2) Parameters context1 T context2 U RegisterListener(GameEventListenerGeneric2<T, U>) public void RegisterListener(GameEventListenerGeneric2<T, U> listener) Parameters listener GameEventListenerGeneric2<T, U> UnregisterListener(GameEventListenerGeneric2<T, U>) public void UnregisterListener(GameEventListenerGeneric2<T, U> listener) Parameters listener GameEventListenerGeneric2<T, U> Events OnEventRaised public event Action<T, U> OnEventRaised Event Type Action<T, U>"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric3-3.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric3-3.html",
    "title": "Class GameEventGeneric3<T, U, W> | Simple RPG Core",
    "keywords": "Class GameEventGeneric3<T, U, W> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class GameEventGeneric3<T, U, W> : ScriptableObject, IRaisable<T, U, W> Type Parameters T U W Inheritance object Object ScriptableObject GameEventGeneric3<T, U, W> Implements IRaisable<T, U, W> Methods Raise(T, U, W) public void Raise(T contextT, U contextU, W contextW) Parameters contextT T contextU U contextW W RegisterListener(GameEventListenerGeneric3<T, U, W>) public void RegisterListener(GameEventListenerGeneric3<T, U, W> listener) Parameters listener GameEventListenerGeneric3<T, U, W> UnregisterListener(GameEventListenerGeneric3<T, U, W>) public void UnregisterListener(GameEventListenerGeneric3<T, U, W> listener) Parameters listener GameEventListenerGeneric3<T, U, W> Events OnEventRaised public event Action<T, U, W> OnEventRaised Event Type Action<T, U, W>"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric4-4.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventGeneric4-4.html",
    "title": "Class GameEventGeneric4<T, U, W, K> | Simple RPG Core",
    "keywords": "Class GameEventGeneric4<T, U, W, K> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class GameEventGeneric4<T, U, W, K> : ScriptableObject, IRaisable<T, U, W, K> Type Parameters T U W K Inheritance object Object ScriptableObject GameEventGeneric4<T, U, W, K> Implements IRaisable<T, U, W, K> Methods Raise(T, U, W, K) public void Raise(T contextT, U contextU, W contextW, K contextK) Parameters contextT T contextU U contextW W contextK K RegisterListener(GameEventListenerGeneric4<T, U, W, K>) public void RegisterListener(GameEventListenerGeneric4<T, U, W, K> listener) Parameters listener GameEventListenerGeneric4<T, U, W, K> UnregisterListener(GameEventListenerGeneric4<T, U, W, K>) public void UnregisterListener(GameEventListenerGeneric4<T, U, W, K> listener) Parameters listener GameEventListenerGeneric4<T, U, W, K> Events OnEventRaised public event Action<T, U, W, K> OnEventRaised Event Type Action<T, U, W, K>"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventListener.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventListener.html",
    "title": "Class GameEventListener | Simple RPG Core",
    "keywords": "Class GameEventListener Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class GameEventListener : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GameEventListener Methods OnEventRaised() public void OnEventRaised()"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric1-1.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric1-1.html",
    "title": "Class GameEventListenerGeneric1<T> | Simple RPG Core",
    "keywords": "Class GameEventListenerGeneric1<T> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class GameEventListenerGeneric1<T> : MonoBehaviour Type Parameters T Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric1<T> Derived EntityCoreGameEventListener IntGameEventListener StatChangedGameEventListener Fields _event [SerializeField] protected GameEventGeneric1<T> _event Field Value GameEventGeneric1<T> _response [SerializeField] protected UnityEvent<T> _response Field Value UnityEvent<T> Methods OnEventRaised(T) public void OnEventRaised(T context) Parameters context T"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric2-2.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric2-2.html",
    "title": "Class GameEventListenerGeneric2<T, U> | Simple RPG Core",
    "keywords": "Class GameEventListenerGeneric2<T, U> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class GameEventListenerGeneric2<T, U> : MonoBehaviour Type Parameters T U Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric2<T, U> Fields _event [SerializeField] protected GameEventGeneric2<T, U> _event Field Value GameEventGeneric2<T, U> _response [SerializeField] protected UnityEvent<T, U> _response Field Value UnityEvent<T, U> Methods OnEventRaised(T, U) public void OnEventRaised(T contextT, U contextU) Parameters contextT T contextU U"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric3-3.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric3-3.html",
    "title": "Class GameEventListenerGeneric3<T, U, W> | Simple RPG Core",
    "keywords": "Class GameEventListenerGeneric3<T, U, W> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class GameEventListenerGeneric3<T, U, W> : MonoBehaviour Type Parameters T U W Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric3<T, U, W> Fields _event [SerializeField] protected GameEventGeneric3<T, U, W> _event Field Value GameEventGeneric3<T, U, W> _response [SerializeField] protected UnityEvent<T, U, W> _response Field Value UnityEvent<T, U, W> Methods OnEventRaised(T, U, W) public void OnEventRaised(T contextT, U contextU, W contextW) Parameters contextT T contextU U contextW W"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric4-4.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.GameEventListenerGeneric4-4.html",
    "title": "Class GameEventListenerGeneric4<T, U, W, K> | Simple RPG Core",
    "keywords": "Class GameEventListenerGeneric4<T, U, W, K> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class GameEventListenerGeneric4<T, U, W, K> : MonoBehaviour Type Parameters T U W K Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric4<T, U, W, K> Fields _event [SerializeField] protected GameEventGeneric4<T, U, W, K> _event Field Value GameEventGeneric4<T, U, W, K> _response [SerializeField] protected UnityEvent<T, U, W, K> _response Field Value UnityEvent<T, U, W, K> Methods OnEventRaised(T, U, W, K) public void OnEventRaised(T contextT, U contextU, W contextW, K contextK) Parameters contextT T contextU U contextW W contextK K"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-1.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-1.html",
    "title": "Interface IRaisable<T> | Simple RPG Core",
    "keywords": "Interface IRaisable<T> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IRaisable<T> Type Parameters T Methods Raise(T) void Raise(T context) Parameters context T"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-2.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-2.html",
    "title": "Interface IRaisable<T, U> | Simple RPG Core",
    "keywords": "Interface IRaisable<T, U> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IRaisable<T, U> Type Parameters T U Methods Raise(T, U) void Raise(T context1, U context2) Parameters context1 T context2 U"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-3.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-3.html",
    "title": "Interface IRaisable<T, U, V> | Simple RPG Core",
    "keywords": "Interface IRaisable<T, U, V> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IRaisable<T, U, V> Type Parameters T U V Methods Raise(T, U, V) void Raise(T context1, U context2, V context3) Parameters context1 T context2 U context3 V"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-4.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.IRaisable-4.html",
    "title": "Interface IRaisable<T, U, V, W> | Simple RPG Core",
    "keywords": "Interface IRaisable<T, U, V, W> Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IRaisable<T, U, V, W> Type Parameters T U V W Methods Raise(T, U, V, W) void Raise(T context1, U context2, V context3, W context4) Parameters context1 T context2 U context3 V context4 W"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.IntGameEvent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.IntGameEvent.html",
    "title": "Class IntGameEvent | Simple RPG Core",
    "keywords": "Class IntGameEvent Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [CreateAssetMenu(fileName = \"Int Game Event\", menuName = \"Simple RPG Core/Events/Generated/Int\")] public class IntGameEvent : GameEventGeneric1<int>, IRaisable<int> Inheritance object Object ScriptableObject GameEventGeneric1<int> IntGameEvent Implements IRaisable<int> Inherited Members GameEventGeneric1<int>.OnEventRaised GameEventGeneric1<int>.Raise(int) GameEventGeneric1<int>.RegisterListener(GameEventListenerGeneric1<int>) GameEventGeneric1<int>.UnregisterListener(GameEventListenerGeneric1<int>)"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.IntGameEventListener.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.IntGameEventListener.html",
    "title": "Class IntGameEventListener | Simple RPG Core",
    "keywords": "Class IntGameEventListener Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class IntGameEventListener : GameEventListenerGeneric1<int> Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric1<int> IntGameEventListener Inherited Members GameEventListenerGeneric1<int>._event GameEventListenerGeneric1<int>._response GameEventListenerGeneric1<int>.OnEventRaised(int)"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.StatChangedGameEvent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.StatChangedGameEvent.html",
    "title": "Class StatChangedGameEvent | Simple RPG Core",
    "keywords": "Class StatChangedGameEvent Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll The stat that changed, the stat's previous value, and the stat's new value [CreateAssetMenu(fileName = \"StatChanged Game Event\", menuName = \"Simple RPG Core/Events/Generated/StatChanged\")] public class StatChangedGameEvent : GameEventGeneric1<StatChangeInfo>, IRaisable<StatChangeInfo> Inheritance object Object ScriptableObject GameEventGeneric1<StatChangeInfo> StatChangedGameEvent Implements IRaisable<StatChangeInfo> Inherited Members GameEventGeneric1<StatChangeInfo>.OnEventRaised GameEventGeneric1<StatChangeInfo>.Raise(StatChangeInfo) GameEventGeneric1<StatChangeInfo>.RegisterListener(GameEventListenerGeneric1<StatChangeInfo>) GameEventGeneric1<StatChangeInfo>.UnregisterListener(GameEventListenerGeneric1<StatChangeInfo>)"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.StatChangedGameEventListener.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.StatChangedGameEventListener.html",
    "title": "Class StatChangedGameEventListener | Simple RPG Core",
    "keywords": "Class StatChangedGameEventListener Namespace ElectricDrill.SimpleRpgCore.Events Assembly ElectricDrill.SimpleRPGCore.Runtime.dll The stat that changed, the stat's previous value, and the stat's new value public class StatChangedGameEventListener : GameEventListenerGeneric1<StatChangeInfo> Inheritance object Object Component Behaviour MonoBehaviour GameEventListenerGeneric1<StatChangeInfo> StatChangedGameEventListener Inherited Members GameEventListenerGeneric1<StatChangeInfo>._event GameEventListenerGeneric1<StatChangeInfo>._response GameEventListenerGeneric1<StatChangeInfo>.OnEventRaised(StatChangeInfo)"
  },
  "api/ElectricDrill.SimpleRpgCore.Events.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Events.html",
    "title": "Namespace ElectricDrill.SimpleRpgCore.Events | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRpgCore.Events Classes EntityCoreGameEvent EntityCoreGameEventListener GameEvent GameEventGenerator GameEventGenerator.EventParameter GameEventGenerator.GameEventDefinition GameEventGeneric1<T> GameEventGeneric2<T, U> GameEventGeneric3<T, U, W> GameEventGeneric4<T, U, W, K> GameEventListener GameEventListenerGeneric1<T> GameEventListenerGeneric2<T, U> GameEventListenerGeneric3<T, U, W> GameEventListenerGeneric4<T, U, W, K> IntGameEvent IntGameEventListener StatChangedGameEvent The stat that changed, the stat's previous value, and the stat's new value StatChangedGameEventListener The stat that changed, the stat's previous value, and the stat's new value Interfaces IRaisable<T> IRaisable<T, U> IRaisable<T, U, V> IRaisable<T, U, V, W> Enums GameEventGenerator.EventParameter.NativeType GameEventGenerator.EventParameter.ParameterType"
  },
  "api/ElectricDrill.SimpleRpgCore.ExpSource.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.ExpSource.html",
    "title": "Class ExpSource | Simple RPG Core",
    "keywords": "Class ExpSource Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class ExpSource : MonoBehaviour, IExpSource Inheritance object Object Component Behaviour MonoBehaviour ExpSource Implements IExpSource Properties Exp public long Exp { get; } Property Value long Harvested public bool Harvested { get; set; } Property Value bool"
  },
  "api/ElectricDrill.SimpleRpgCore.GrowthFormula.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.GrowthFormula.html",
    "title": "Class GrowthFormula | Simple RPG Core",
    "keywords": "Class GrowthFormula Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class GrowthFormula : ScriptableObject Inheritance object Object ScriptableObject GrowthFormula Properties GrowthFoValues public double[] GrowthFoValues { get; } Property Value double[] Methods GetGrowthValue(int) public long GetGrowthValue(int level) Parameters level int Returns long"
  },
  "api/ElectricDrill.SimpleRpgCore.GrowthFormulaMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.GrowthFormulaMenuItems.html",
    "title": "Class GrowthFormulaMenuItems | Simple RPG Core",
    "keywords": "Class GrowthFormulaMenuItems Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class GrowthFormulaMenuItems Inheritance object GrowthFormulaMenuItems Methods CreateGrowthFormula() [MenuItem(\"Assets/Create/Simple RPG Core/Growth Formula\", false, 6)] public static void CreateGrowthFormula()"
  },
  "api/ElectricDrill.SimpleRpgCore.IAttributes.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.IAttributes.html",
    "title": "Interface IAttributes | Simple RPG Core",
    "keywords": "Interface IAttributes Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IAttributes Properties Attributes EntityAttributes Attributes { get; } Property Value EntityAttributes"
  },
  "api/ElectricDrill.SimpleRpgCore.IClassSource.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.IClassSource.html",
    "title": "Interface IClassSource | Simple RPG Core",
    "keywords": "Interface IClassSource Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IClassSource Properties Class Class Class { get; } Property Value Class"
  },
  "api/ElectricDrill.SimpleRpgCore.IEntityCore.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.IEntityCore.html",
    "title": "Interface IEntityCore | Simple RPG Core",
    "keywords": "Interface IEntityCore Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IEntityCore Properties Attributes EntityAttributes Attributes { get; } Property Value EntityAttributes Level EntityLevel Level { get; } Property Value EntityLevel Name string Name { get; } Property Value string Stats EntityStats Stats { get; } Property Value EntityStats"
  },
  "api/ElectricDrill.SimpleRpgCore.IExpSource.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.IExpSource.html",
    "title": "Interface IExpSource | Simple RPG Core",
    "keywords": "Interface IExpSource Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IExpSource Properties Exp long Exp { get; } Property Value long Harvested bool Harvested { get; set; } Property Value bool"
  },
  "api/ElectricDrill.SimpleRpgCore.ILevel.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.ILevel.html",
    "title": "Interface ILevel | Simple RPG Core",
    "keywords": "Interface ILevel Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface ILevel Properties Level EntityLevel Level { get; } Property Value EntityLevel"
  },
  "api/ElectricDrill.SimpleRpgCore.ILevelable.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.ILevelable.html",
    "title": "Interface ILevelable | Simple RPG Core",
    "keywords": "Interface ILevelable Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface ILevelable Properties CurrentTotalExperience long CurrentTotalExperience { get; } Property Value long Level int Level { get; set; } Property Value int Methods AddExp(long) void AddExp(long amount) Parameters amount long CurrentLevelTotalExperience() long CurrentLevelTotalExperience() Returns long NextLevelTotalExperience() long NextLevelTotalExperience() Returns long SetTotalCurrentExp(long) void SetTotalCurrentExp(long totalCurrentExperience) Parameters totalCurrentExperience long ValidateExperience() void ValidateExperience()"
  },
  "api/ElectricDrill.SimpleRpgCore.IStatSet.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.IStatSet.html",
    "title": "Interface IStatSet | Simple RPG Core",
    "keywords": "Interface IStatSet Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IStatSet Properties StatSet StatSet StatSet { get; } Property Value StatSet"
  },
  "api/ElectricDrill.SimpleRpgCore.IStatSetSource.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.IStatSetSource.html",
    "title": "Interface IStatSetSource | Simple RPG Core",
    "keywords": "Interface IStatSetSource Namespace ElectricDrill.SimpleRpgCore Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IStatSetSource Properties StatSet StatSet StatSet { get; } Property Value StatSet"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.AttributeScalingComponentMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.AttributeScalingComponentMenuItems.html",
    "title": "Class AttributeScalingComponentMenuItems | Simple RPG Core",
    "keywords": "Class AttributeScalingComponentMenuItems Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class AttributeScalingComponentMenuItems Inheritance object AttributeScalingComponentMenuItems Methods CreateAttributeScalingComponent() [MenuItem(\"Assets/Create/Simple RPG Core/Scaling/Attribute Scaling Component\", false, 1)] public static void CreateAttributeScalingComponent()"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.AttributesScalingComponent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.AttributesScalingComponent.html",
    "title": "Class AttributesScalingComponent | Simple RPG Core",
    "keywords": "Class AttributesScalingComponent Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class AttributesScalingComponent : SoSetScalingComponentBase<AttributeSet, Attribute> Inheritance object Object ScriptableObject ScalingComponent SoSetScalingComponentBase<AttributeSet, Attribute> AttributesScalingComponent Inherited Members SoSetScalingComponentBase<AttributeSet, Attribute>._set SoSetScalingComponentBase<AttributeSet, Attribute>.CalculateValue(EntityCore) SoSetScalingComponentBase<AttributeSet, Attribute>.GetEntitySet(EntityCore) SoSetScalingComponentBase<AttributeSet, Attribute>.GetEntityValue(EntityCore, Attribute) SoSetScalingComponentBase<AttributeSet, Attribute>.OnValidate() SoSetScalingComponentBase<AttributeSet, Attribute>.GetSetItems() ScalingComponent.CalculateValue(EntityCore) Methods GetEntitySet(EntityCore) protected override AttributeSet GetEntitySet(EntityCore entity) Parameters entity EntityCore Returns AttributeSet GetEntityValue(EntityCore, Attribute) protected override long GetEntityValue(EntityCore entity, Attribute key) Parameters entity EntityCore key Attribute Returns long GetSetItems() protected override IEnumerable<Attribute> GetSetItems() Returns IEnumerable<Attribute>"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.ScalingComponent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.ScalingComponent.html",
    "title": "Class ScalingComponent | Simple RPG Core",
    "keywords": "Class ScalingComponent Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class ScalingComponent : ScriptableObject Inheritance object Object ScriptableObject ScalingComponent Derived SoSetScalingComponentBase<SetType, KeyType> Methods CalculateValue(EntityCore) public abstract long CalculateValue(EntityCore entity) Parameters entity EntityCore Returns long"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.ScalingFormula.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.ScalingFormula.html",
    "title": "Class ScalingFormula | Simple RPG Core",
    "keywords": "Class ScalingFormula Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class ScalingFormula : ScriptableObject Inheritance object Object ScriptableObject ScalingFormula Properties TmpSelfScalingComponents public List<ScalingComponent> TmpSelfScalingComponents { get; } Property Value List<ScalingComponent> TmpTargetScalingComponents public List<ScalingComponent> TmpTargetScalingComponents { get; } Property Value List<ScalingComponent> Methods CalculateValue(EntityCore) public long CalculateValue(EntityCore self) Parameters self EntityCore Returns long CalculateValue(EntityCore, EntityCore) public long CalculateValue(EntityCore self, EntityCore target) Parameters self EntityCore target EntityCore Returns long CalculateValue(EntityCore, EntityCore, int) public long CalculateValue(EntityCore self, EntityCore target, int level) Parameters self EntityCore target EntityCore level int Returns long CalculateValue(EntityCore, int) public long CalculateValue(EntityCore self, int level) Parameters self EntityCore level int Returns long ResetTmpScalings() public void ResetTmpScalings()"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.ScalingFormulaMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.ScalingFormulaMenuItems.html",
    "title": "Class ScalingFormulaMenuItems | Simple RPG Core",
    "keywords": "Class ScalingFormulaMenuItems Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class ScalingFormulaMenuItems Inheritance object ScalingFormulaMenuItems Methods CreateScalingFormula() [MenuItem(\"Assets/Create/Simple RPG Core/Scaling/Scaling Formula &#S\", false, 0)] public static void CreateScalingFormula()"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.SoSetScalingComponentBase-2.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.SoSetScalingComponentBase-2.html",
    "title": "Class SoSetScalingComponentBase<SetType, KeyType> | Simple RPG Core",
    "keywords": "Class SoSetScalingComponentBase<SetType, KeyType> Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public abstract class SoSetScalingComponentBase<SetType, KeyType> : ScalingComponent where SetType : ScriptableObject Type Parameters SetType KeyType Inheritance object Object ScriptableObject ScalingComponent SoSetScalingComponentBase<SetType, KeyType> Derived AttributesScalingComponent StatsScalingComponent Fields _set [SerializeField] protected SetType _set Field Value SetType Methods CalculateValue(EntityCore) public override long CalculateValue(EntityCore entity) Parameters entity EntityCore Returns long GetEntitySet(EntityCore) protected abstract SetType GetEntitySet(EntityCore entity) Parameters entity EntityCore Returns SetType GetEntityValue(EntityCore, KeyType) protected abstract long GetEntityValue(EntityCore entity, KeyType key) Parameters entity EntityCore key KeyType Returns long GetSetItems() protected abstract IEnumerable<KeyType> GetSetItems() Returns IEnumerable<KeyType> OnValidate() protected virtual void OnValidate()"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.StatScalingComponentMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.StatScalingComponentMenuItems.html",
    "title": "Class StatScalingComponentMenuItems | Simple RPG Core",
    "keywords": "Class StatScalingComponentMenuItems Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class StatScalingComponentMenuItems Inheritance object StatScalingComponentMenuItems Methods CreateStatScalingComponent() [MenuItem(\"Assets/Create/Simple RPG Core/Scaling/Stat Scaling Component\", false, 2)] public static void CreateStatScalingComponent()"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.StatsScalingComponent.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.StatsScalingComponent.html",
    "title": "Class StatsScalingComponent | Simple RPG Core",
    "keywords": "Class StatsScalingComponent Namespace ElectricDrill.SimpleRpgCore.Scaling Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class StatsScalingComponent : SoSetScalingComponentBase<StatSet, Stat> Inheritance object Object ScriptableObject ScalingComponent SoSetScalingComponentBase<StatSet, Stat> StatsScalingComponent Inherited Members SoSetScalingComponentBase<StatSet, Stat>._set SoSetScalingComponentBase<StatSet, Stat>.CalculateValue(EntityCore) SoSetScalingComponentBase<StatSet, Stat>.GetEntitySet(EntityCore) SoSetScalingComponentBase<StatSet, Stat>.GetEntityValue(EntityCore, Stat) SoSetScalingComponentBase<StatSet, Stat>.OnValidate() SoSetScalingComponentBase<StatSet, Stat>.GetSetItems() ScalingComponent.CalculateValue(EntityCore) Methods GetEntitySet(EntityCore) protected override StatSet GetEntitySet(EntityCore entity) Parameters entity EntityCore Returns StatSet GetEntityValue(EntityCore, Stat) protected override long GetEntityValue(EntityCore entity, Stat key) Parameters entity EntityCore key Stat Returns long GetSetItems() protected override IEnumerable<Stat> GetSetItems() Returns IEnumerable<Stat>"
  },
  "api/ElectricDrill.SimpleRpgCore.Scaling.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Scaling.html",
    "title": "Namespace ElectricDrill.SimpleRpgCore.Scaling | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRpgCore.Scaling Classes AttributeScalingComponentMenuItems AttributesScalingComponent ScalingComponent ScalingFormula ScalingFormulaMenuItems SoSetScalingComponentBase<SetType, KeyType> StatScalingComponentMenuItems StatsScalingComponent"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.EntityStats.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.EntityStats.html",
    "title": "Class EntityStats | Simple RPG Core",
    "keywords": "Class EntityStats Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll Component that manages the statistics of an entity in the game. It handles base stats, flat stat modifiers, stat to stat modifiers, and percentage stat modifiers. Base stats can either be fixed or come from the entity's class (if one is available on the Game Object). When stats change because of a modifier of any kind, the assigned StatChangedGameEvent is raised. [RequireComponent(typeof(EntityCore))] public class EntityStats : MonoBehaviour, IStatSetSource Inheritance object Object Component Behaviour MonoBehaviour EntityStats Implements IStatSetSource Fields _entityClass protected IClassSource _entityClass Field Value IClassSource _flatModifiers protected StatSetInstance _flatModifiers Field Value StatSetInstance _percentageModifiers protected StatSetInstance _percentageModifiers Field Value StatSetInstance Properties EntityClass The class source of the entity. In most cases, this is the EntityClass component attached to the entity. public IClassSource EntityClass { get; } Property Value IClassSource EntityCore The entity core associated with this stats component. public EntityCore EntityCore { get; } Property Value EntityCore OnStatChanged Event raised when a stat changes due to a modifier. public StatChangedGameEvent OnStatChanged { get; } Property Value StatChangedGameEvent StatSet The stat set used to calculate the entity's stats. public virtual StatSet StatSet { get; } Property Value StatSet If useBaseStatsFromClass is true, it returns the stat set of the entity's class. Otherwise, it returns the fixed base stats stat set. StatsCache public Cache<Stat, long> StatsCache { get; } Property Value Cache<Stat, long> UseClassBaseStats Indicates whether to use base stats from the entity's class or the fixed base stats. public bool UseClassBaseStats { get; } Property Value bool Methods AddFlatModifier(Stat, long) Adds a flat modifier to a stat. public void AddFlatModifier(Stat stat, long value) Parameters stat Stat The stat to add the flat modifier to. value long The value of the flat modifier. AddPercentageModifier(Stat, Percentage) Adds a Percentage modifier to a stat. Such modifiers consider the base value of the stat, the flat modifiers, and the stat-to-stat modifiers. public void AddPercentageModifier(Stat stat, Percentage value) Parameters stat Stat The stat to add the percentage modifier to. value Percentage The value of the percentage modifier. AddStatToStatModifer(Stat, Stat, Percentage) Adds a stat-to-stat modifier. Such modifiers add a percentage of the source stat to the target stat. Such modifiers consider the base value and the flat modifiers of the source stat. public void AddStatToStatModifer(Stat target, Stat source, Percentage percentage) Parameters target Stat The target stat. source Stat The source stat. percentage Percentage The Percentage of the source stat to add to the target stat. Get(Stat) The final value of a stat, considering all the modifiers. Calculation is done in the following order: Base value Flat modifiers Stat to stat modifiers Percentage modifiers public virtual long Get(Stat stat) Parameters stat Stat The stat to get the final value of. Returns long The final value of the stat. The value is clamped to the stat's min and max values. GetBase(Stat) The base value is the value of the stat without any modifiers. If UseClassBaseStats is true, it returns the value from the entity's class. Otherwise, it returns the value from the fixed base stats. public long GetBase(Stat stat) Parameters stat Stat The stat to get the base value of. Returns long The base value of the stat. The value is clamped to the stat's min and max values. OnLevelUp(int) Callback method called when the entity levels up. protected virtual void OnLevelUp(int level) Parameters level int The new level of the entity. SetFixed(Stat, long) Sets the value of a fixed base stat. public void SetFixed(Stat s, long v) Parameters s Stat The stat to set. v long The value to set."
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.IStatContainer.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.IStatContainer.html",
    "title": "Interface IStatContainer | Simple RPG Core",
    "keywords": "Interface IStatContainer Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public interface IStatContainer Methods Contains(Stat) bool Contains(Stat stat) Parameters stat Stat Returns bool"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.Stat.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.Stat.html",
    "title": "Class Stat | Simple RPG Core",
    "keywords": "Class Stat Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class Stat : BoundedValue Inheritance object Object ScriptableObject BoundedValue Stat Inherited Members BoundedValue.HasMaxValue BoundedValue.MaxValue BoundedValue.HasMinValue BoundedValue.MinValue Properties AttributesScaling [CanBeNull] public AttributesScalingComponent AttributesScaling { get; } Property Value AttributesScalingComponent Methods Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int Operators operator ==(Stat, Stat) public static bool operator ==(Stat a, Stat b) Parameters a Stat b Stat Returns bool operator !=(Stat, Stat) public static bool operator !=(Stat a, Stat b) Parameters a Stat b Stat Returns bool"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.StatMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.StatMenuItems.html",
    "title": "Class StatMenuItems | Simple RPG Core",
    "keywords": "Class StatMenuItems Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class StatMenuItems Inheritance object StatMenuItems Methods CreateStat() [MenuItem(\"Assets/Create/Simple RPG Core/Stat ^&S\", false, 2)] public static void CreateStat()"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.StatSet.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.StatSet.html",
    "title": "Class StatSet | Simple RPG Core",
    "keywords": "Class StatSet Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class StatSet : ScriptableObject, IStatContainer Inheritance object Object ScriptableObject StatSet Implements IStatContainer Properties Stats public IReadOnlyList<Stat> Stats { get; } Property Value IReadOnlyList<Stat> Methods Contains(Stat) public virtual bool Contains(Stat stat) Parameters stat Stat Returns bool Get(Stat) public Stat Get(Stat stat) Parameters stat Stat Returns Stat"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.StatSetInstance.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.StatSetInstance.html",
    "title": "Class StatSetInstance | Simple RPG Core",
    "keywords": "Class StatSetInstance Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class StatSetInstance : IStatContainer Inheritance object StatSetInstance Implements IStatContainer Constructors StatSetInstance(StatSet) public StatSetInstance(StatSet statSet) Parameters statSet StatSet Properties this[Stat] public long this[Stat stat] { get; set; } Parameters stat Stat Property Value long Stats public Dictionary<Stat, long> Stats { get; } Property Value Dictionary<Stat, long> Methods AddValue(Stat, long) Adds value to stat. If the stat does not exist, it will be created and initialized with value. Use negative values to subtract from the stat. public void AddValue(Stat stat, long value) Parameters stat Stat The stat to add the value to. value long The value to add to the stat. Clone() public StatSetInstance Clone() Returns StatSetInstance Contains(Stat) public bool Contains(Stat stat) Parameters stat Stat Returns bool Get(Stat) public long Get(Stat stat) Parameters stat Stat The stat to be retrieved. Returns long The value of the stat GetAsPercentage(Stat) public Percentage GetAsPercentage(Stat stat) Parameters stat Stat Returns Percentage GetEnumerator() public IEnumerator<KeyValuePair<Stat, long>> GetEnumerator() Returns IEnumerator<KeyValuePair<Stat, long>> Operators operator +(StatSetInstance, StatSetInstance) The addition operator for StatSetInstance. Considered the stats present in the StatSetInstance a, their values will be summed with the values of the respective stats in the StatSetInstance b. If a stat is present in the StatSetInstance a but not in the StatSetInstance b, an exception will be thrown. public static StatSetInstance operator +(StatSetInstance a, StatSetInstance b) Parameters a StatSetInstance The first StatSetInstance b StatSetInstance The second StatSetInstance Returns StatSetInstance A new StatSetInstance with the sum of the stats of a to the respective values of the stats of b"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.StatSetMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.StatSetMenuItems.html",
    "title": "Class StatSetMenuItems | Simple RPG Core",
    "keywords": "Class StatSetMenuItems Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class StatSetMenuItems Inheritance object StatSetMenuItems Methods CreateStatSet() [MenuItem(\"Assets/Create/Simple RPG Core/Stat Set\", false, 3)] public static void CreateStatSet()"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.StatToStatModifier.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.StatToStatModifier.html",
    "title": "Class StatToStatModifier | Simple RPG Core",
    "keywords": "Class StatToStatModifier Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public class StatToStatModifier : ScriptableObject Inheritance object Object ScriptableObject StatToStatModifier Properties Percentage public Percentage Percentage { get; } Property Value Percentage SourceStat public Stat SourceStat { get; } Property Value Stat TargetStat public Stat TargetStat { get; } Property Value Stat"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.StatToStatModifierMenuItems.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.StatToStatModifierMenuItems.html",
    "title": "Class StatToStatModifierMenuItems | Simple RPG Core",
    "keywords": "Class StatToStatModifierMenuItems Namespace ElectricDrill.SimpleRpgCore.Stats Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class StatToStatModifierMenuItems Inheritance object StatToStatModifierMenuItems Methods CreateStatToStatModifier() [MenuItem(\"Assets/Create/Simple RPG Core/Stat to Stat Modifier ^&M\", false, 4)] public static void CreateStatToStatModifier()"
  },
  "api/ElectricDrill.SimpleRpgCore.Stats.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Stats.html",
    "title": "Namespace ElectricDrill.SimpleRpgCore.Stats | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRpgCore.Stats Classes EntityStats Component that manages the statistics of an entity in the game. It handles base stats, flat stat modifiers, stat to stat modifiers, and percentage stat modifiers. Base stats can either be fixed or come from the entity's class (if one is available on the Game Object). When stats change because of a modifier of any kind, the assigned StatChangedGameEvent is raised. Stat StatMenuItems StatSet StatSetInstance StatSetMenuItems StatToStatModifier StatToStatModifierMenuItems Interfaces IStatContainer"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.InitializationUtils.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.InitializationUtils.html",
    "title": "Class InitializationUtils | Simple RPG Core",
    "keywords": "Class InitializationUtils Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public static class InitializationUtils Inheritance object InitializationUtils Methods RefreshInspectorReservedValues<TKey, TValue>(ref List<SerKeyValPair<TKey, TValue>>, IEnumerable<TKey>) public static void RefreshInspectorReservedValues<TKey, TValue>(ref List<SerKeyValPair<TKey, TValue>> inspectorReservedValues, IEnumerable<TKey> keys) Parameters inspectorReservedValues List<SerKeyValPair<TKey, TValue>> keys IEnumerable<TKey> Type Parameters TKey TValue"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.IntRef.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.IntRef.html",
    "title": "Class IntRef | Simple RPG Core",
    "keywords": "Class IntRef Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class IntRef Inheritance object IntRef Fields ConstantValue public int ConstantValue Field Value int UseConstant public bool UseConstant Field Value bool Variable public IntVar Variable Field Value IntVar Properties Value public int Value { get; set; } Property Value int Operators implicit operator int(IntRef) public static implicit operator int(IntRef reference) Parameters reference IntRef Returns int implicit operator IntRef(int) public static implicit operator IntRef(int value) Parameters value int Returns IntRef"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.IntVar.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.IntVar.html",
    "title": "Class IntVar | Simple RPG Core",
    "keywords": "Class IntVar Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [CreateAssetMenu] public class IntVar : ScriptableObject Inheritance object Object ScriptableObject IntVar Properties Value public int Value { get; set; } Property Value int Operators implicit operator int(IntVar) public static implicit operator int(IntVar var) Parameters var IntVar Returns int"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.LongRef.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.LongRef.html",
    "title": "Class LongRef | Simple RPG Core",
    "keywords": "Class LongRef Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class LongRef Inheritance object LongRef Fields ConstantValue public long ConstantValue Field Value long UseConstant public bool UseConstant Field Value bool Variable public LongVar Variable Field Value LongVar Properties Value public long Value { get; set; } Property Value long Operators implicit operator long(LongRef) public static implicit operator long(LongRef reference) Parameters reference LongRef Returns long"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.LongVar.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.LongVar.html",
    "title": "Class LongVar | Simple RPG Core",
    "keywords": "Class LongVar Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [CreateAssetMenu] public class LongVar : ScriptableObject Inheritance object Object ScriptableObject LongVar Properties Value public long Value { get; set; } Property Value long Operators implicit operator long(LongVar) public static implicit operator long(LongVar var) Parameters var LongVar Returns long"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.Percentage.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.Percentage.html",
    "title": "Class Percentage | Simple RPG Core",
    "keywords": "Class Percentage Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll The Percentage class represents a percentage value and provides various operators and conversions. Implicit long to Percentage value conversion is available. To express a 100% value, use 100L. Implicit Percentage to double conversion is available. When doing so, the percentage is automatically divided by 100. [Serializable] public class Percentage Inheritance object Percentage Constructors Percentage(long) Initializes a new instance of the Percentage class with the specified value. To express a 100% value, use 100L. public Percentage(long value) Parameters value long The value of the percentage. Methods CompareTo(Percentage) Compares the current Percentage instance with another Percentage instance. public int CompareTo(Percentage other) Parameters other Percentage The other percentage to compare to. Returns int An integer indicating the relative order of the percentages. ToString() Returns a string representation of the percentage value. public override string ToString() Returns string A string representing the percentage value. Operators operator +(Percentage, Percentage) Overrides the + operator to add two Percentage instances. public static Percentage operator +(Percentage a, Percentage b) Parameters a Percentage The first percentage. b Percentage The second percentage. Returns Percentage A new Percentage instance representing the sum. explicit operator long(Percentage) Explicit conversion from Percentage to long. The conversion does not divide the value by 100. public static explicit operator long(Percentage percentage) Parameters percentage Percentage The percentage to convert. Returns long implicit operator double(Percentage) Implicit conversion from Percentage to double. The conversion automatically divides the value by 100. public static implicit operator double(Percentage percentage) Parameters percentage Percentage The percentage to convert. Returns double implicit operator Percentage(long) Implicit conversion from long to Percentage. To express a 100% value, use 100L. public static implicit operator Percentage(long value) Parameters value long The value to convert. Returns Percentage operator -(Percentage, Percentage) Overrides the - operator to subtract one Percentage from another. public static Percentage operator -(Percentage a, Percentage b) Parameters a Percentage The first percentage. b Percentage The second percentage. Returns Percentage A new Percentage instance representing the difference. operator -(Percentage) Overrides the unary - operator to negate a Percentage. public static Percentage operator -(Percentage a) Parameters a Percentage The percentage to negate. Returns Percentage A new Percentage instance representing the negated value."
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.SerKeyValPair-2.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.SerKeyValPair-2.html",
    "title": "Struct SerKeyValPair<T, U> | Simple RPG Core",
    "keywords": "Struct SerKeyValPair<T, U> Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public struct SerKeyValPair<T, U> Type Parameters T U Constructors SerKeyValPair(T, U) public SerKeyValPair(T key, U value) Parameters key T value U Fields Key public T Key Field Value T Value public U Value Field Value U Operators implicit operator KeyValuePair<T, U>(SerKeyValPair<T, U>) public static implicit operator KeyValuePair<T, U>(SerKeyValPair<T, U> serKeyValPair) Parameters serKeyValPair SerKeyValPair<T, U> Returns KeyValuePair<T, U> implicit operator SerKeyValPair<T, U>(KeyValuePair<T, U>) public static implicit operator SerKeyValPair<T, U>(KeyValuePair<T, U> keyValuePair) Parameters keyValuePair KeyValuePair<T, U> Returns SerKeyValPair<T, U>"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html",
    "title": "Class SerializableDictionary<TKey, TValue> | Simple RPG Core",
    "keywords": "Class SerializableDictionary<TKey, TValue> Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class SerializableDictionary<TKey, TValue> Type Parameters TKey TValue Inheritance object SerializableDictionary<TKey, TValue> Properties this[TKey] public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Keys public Dictionary<TKey, TValue>.KeyCollection Keys { get; } Property Value Dictionary<TKey, TValue>.KeyCollection Values public Dictionary<TKey, TValue>.ValueCollection Values { get; } Property Value Dictionary<TKey, TValue>.ValueCollection Methods Clear() public void Clear() ContainsKey(TKey) public bool ContainsKey(TKey key) Parameters key TKey Returns bool GetEnumerator() public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> OnAfterDeserialize() Implement this callback to transform data back into runtime data types after an object is deserialized. public void OnAfterDeserialize() OnBeforeSerialize() Implement this callback to transform data into serializable data types immediately before an object is serialized. public void OnBeforeSerialize() TryGetValue(TKey, out TValue) public bool TryGetValue(TKey key, out TValue value) Parameters key TKey value TValue Returns bool Operators implicit operator Dictionary<TKey, TValue>(SerializableDictionary<TKey, TValue>) public static implicit operator Dictionary<TKey, TValue>(SerializableDictionary<TKey, TValue> serializableDictionary) Parameters serializableDictionary SerializableDictionary<TKey, TValue> Returns Dictionary<TKey, TValue> implicit operator SerializableDictionary<TKey, TValue>(Dictionary<TKey, TValue>) public static implicit operator SerializableDictionary<TKey, TValue>(Dictionary<TKey, TValue> dictionary) Parameters dictionary Dictionary<TKey, TValue> Returns SerializableDictionary<TKey, TValue>"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.SerializableHashSet-1.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.SerializableHashSet-1.html",
    "title": "Class SerializableHashSet<T> | Simple RPG Core",
    "keywords": "Class SerializableHashSet<T> Namespace ElectricDrill.SimpleRpgCore.Utils Assembly ElectricDrill.SimpleRPGCore.Runtime.dll [Serializable] public class SerializableHashSet<T> Type Parameters T Inheritance object SerializableHashSet<T> Properties Count public int Count { get; } Property Value int IsReadOnly public bool IsReadOnly { get; } Property Value bool Methods Add(T) public void Add(T item) Parameters item T Clear() public void Clear() Contains(T) public bool Contains(T item) Parameters item T Returns bool CopyTo(T[], int) public void CopyTo(T[] array, int arrayIndex) Parameters array T[] arrayIndex int GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> GetObjectData(SerializationInfo, StreamingContext) public void GetObjectData(SerializationInfo info, StreamingContext context) Parameters info SerializationInfo context StreamingContext OnAfterDeserialize() Implement this callback to transform data back into runtime data types after an object is deserialized. public void OnAfterDeserialize() OnBeforeSerialize() Implement this callback to transform data into serializable data types immediately before an object is serialized. public void OnBeforeSerialize() Remove(T) public bool Remove(T item) Parameters item T Returns bool RemoveWhere(Predicate<T>) public int RemoveWhere(Predicate<T> match) Parameters match Predicate<T> Returns int"
  },
  "api/ElectricDrill.SimpleRpgCore.Utils.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.Utils.html",
    "title": "Namespace ElectricDrill.SimpleRpgCore.Utils | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRpgCore.Utils Classes InitializationUtils IntRef IntVar LongRef LongVar Percentage The Percentage class represents a percentage value and provides various operators and conversions. Implicit long to Percentage value conversion is available. To express a 100% value, use 100L. Implicit Percentage to double conversion is available. When doing so, the percentage is automatically divided by 100. SerializableDictionary<TKey, TValue> SerializableHashSet<T> Structs SerKeyValPair<T, U>"
  },
  "api/ElectricDrill.SimpleRpgCore.html": {
    "href": "api/ElectricDrill.SimpleRpgCore.html",
    "title": "Namespace ElectricDrill.SimpleRpgCore | Simple RPG Core",
    "keywords": "Namespace ElectricDrill.SimpleRpgCore Classes BoundedValue Class ClassMenuItems EntityClass EntityCore EntityLevel ExpSource GrowthFormula GrowthFormulaMenuItems Interfaces IAttributes IClassSource IEntityCore IExpSource ILevel ILevelable IStatSetSource"
  },
  "api/ElectricDrill.StatChangeInfo.html": {
    "href": "api/ElectricDrill.StatChangeInfo.html",
    "title": "Struct StatChangeInfo | Simple RPG Core",
    "keywords": "Struct StatChangeInfo Namespace ElectricDrill Assembly ElectricDrill.SimpleRPGCore.Runtime.dll public struct StatChangeInfo Constructors StatChangeInfo(EntityStats, Stat, long, long) public StatChangeInfo(EntityStats entity, Stat stat, long oldValue, long newValue) Parameters entity EntityStats stat Stat oldValue long newValue long Fields EntityStats public EntityStats EntityStats Field Value EntityStats NewValue public long NewValue Field Value long OldValue public long OldValue Field Value long Stat public Stat Stat Field Value Stat"
  },
  "api/ElectricDrill.html": {
    "href": "api/ElectricDrill.html",
    "title": "Namespace ElectricDrill | Simple RPG Core",
    "keywords": "Namespace ElectricDrill Structs StatChangeInfo"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | Simple RPG Core",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}