### YamlMime:ManagedReference
items:
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage
  commentId: T:ElectricDrill.SimpleRpgCore.Utils.Percentage
  id: Percentage
  parent: ElectricDrill.SimpleRpgCore.Utils
  children:
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.#ctor(System.Int64)
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Explicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Int64
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Double
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit(System.Int64)~ElectricDrill.SimpleRpgCore.Utils.Percentage
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  - ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  langs:
  - csharp
  - vb
  name: Percentage
  nameWithType: Percentage
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage
  type: Class
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: Percentage
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 12
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: >-
    The Percentage class represents a percentage value and provides various operators and conversions.<br />

    Implicit long to Percentage value conversion is available. To express a 100% value, use 100L.<br />

    Implicit Percentage to double conversion is available. When doing so, the percentage is automatically

    divided by 100.<br />
  example: []
  syntax:
    content: >-
      [Serializable]

      public class Percentage
    content.vb: >-
      <Serializable>

      Public Class Percentage
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.#ctor(System.Int64)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.#ctor(System.Int64)
  id: '#ctor(System.Int64)'
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: Percentage(long)
  nameWithType: Percentage.Percentage(long)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.Percentage(long)
  type: Constructor
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: .ctor
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 25
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: >-
    Initializes a new instance of the Percentage class with the specified value.

    To express a 100% value, use 100L.
  example: []
  syntax:
    content: public Percentage(long value)
    parameters:
    - id: value
      type: System.Int64
      description: The value of the percentage.
    content.vb: Public Sub New(value As Long)
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.#ctor*
  nameWithType.vb: Percentage.New(Long)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.New(Long)
  name.vb: New(Long)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Double
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Double
  id: op_Implicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Double
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: implicit operator double(Percentage)
  nameWithType: Percentage.implicit operator double(Percentage)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.implicit operator double(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Implicit
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 33
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Implicit conversion from Percentage to double. The conversion automatically divides the value by 100.
  example: []
  syntax:
    content: public static implicit operator double(Percentage percentage)
    parameters:
    - id: percentage
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The percentage to convert.
    return:
      type: System.Double
    content.vb: Public Shared Widening Operator CType(percentage As Percentage) As Double
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit*
  nameWithType.vb: Percentage.CType(Percentage)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.CType(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  name.vb: CType(Percentage)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit(System.Int64)~ElectricDrill.SimpleRpgCore.Utils.Percentage
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit(System.Int64)~ElectricDrill.SimpleRpgCore.Utils.Percentage
  id: op_Implicit(System.Int64)~ElectricDrill.SimpleRpgCore.Utils.Percentage
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: implicit operator Percentage(long)
  nameWithType: Percentage.implicit operator Percentage(long)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.implicit operator ElectricDrill.SimpleRpgCore.Utils.Percentage(long)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Implicit
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 41
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Implicit conversion from long to Percentage. To express a 100% value, use 100L.
  example: []
  syntax:
    content: public static implicit operator Percentage(long value)
    parameters:
    - id: value
      type: System.Int64
      description: The value to convert.
    return:
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
    content.vb: Public Shared Widening Operator CType(value As Long) As Percentage
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit*
  nameWithType.vb: Percentage.CType(Long)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.CType(Long)
  name.vb: CType(Long)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Explicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Int64
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Explicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Int64
  id: op_Explicit(ElectricDrill.SimpleRpgCore.Utils.Percentage)~System.Int64
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: explicit operator long(Percentage)
  nameWithType: Percentage.explicit operator long(Percentage)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.explicit operator long(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Explicit
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 49
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Explicit conversion from Percentage to long. The conversion does not divide the value by 100.
  example: []
  syntax:
    content: public static explicit operator long(Percentage percentage)
    parameters:
    - id: percentage
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The percentage to convert.
    return:
      type: System.Int64
    content.vb: Public Shared Narrowing Operator CType(percentage As Percentage) As Long
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Explicit*
  nameWithType.vb: Percentage.CType(Percentage)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.CType(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  name.vb: CType(Percentage)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  id: op_Addition(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: operator +(Percentage, Percentage)
  nameWithType: Percentage.operator +(Percentage, Percentage)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.operator +(ElectricDrill.SimpleRpgCore.Utils.Percentage, ElectricDrill.SimpleRpgCore.Utils.Percentage)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Addition
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 59
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Overrides the + operator to add two Percentage instances.
  example: []
  syntax:
    content: public static Percentage operator +(Percentage a, Percentage b)
    parameters:
    - id: a
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The first percentage.
    - id: b
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The second percentage.
    return:
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: A new Percentage instance representing the sum.
    content.vb: Public Shared Operator +(a As Percentage, b As Percentage) As Percentage
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition*
  nameWithType.vb: Percentage.+(Percentage, Percentage)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.+(ElectricDrill.SimpleRpgCore.Utils.Percentage, ElectricDrill.SimpleRpgCore.Utils.Percentage)
  name.vb: +(Percentage, Percentage)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  id: op_Subtraction(ElectricDrill.SimpleRpgCore.Utils.Percentage,ElectricDrill.SimpleRpgCore.Utils.Percentage)
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: operator -(Percentage, Percentage)
  nameWithType: Percentage.operator -(Percentage, Percentage)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.operator -(ElectricDrill.SimpleRpgCore.Utils.Percentage, ElectricDrill.SimpleRpgCore.Utils.Percentage)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Subtraction
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 69
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Overrides the - operator to subtract one Percentage from another.
  example: []
  syntax:
    content: public static Percentage operator -(Percentage a, Percentage b)
    parameters:
    - id: a
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The first percentage.
    - id: b
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The second percentage.
    return:
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: A new Percentage instance representing the difference.
    content.vb: Public Shared Operator -(a As Percentage, b As Percentage) As Percentage
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction*
  nameWithType.vb: Percentage.-(Percentage, Percentage)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.-(ElectricDrill.SimpleRpgCore.Utils.Percentage, ElectricDrill.SimpleRpgCore.Utils.Percentage)
  name.vb: -(Percentage, Percentage)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  id: op_UnaryNegation(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: operator -(Percentage)
  nameWithType: Percentage.operator -(Percentage)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.operator -(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_UnaryNegation
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 78
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Overrides the unary - operator to negate a Percentage.
  example: []
  syntax:
    content: public static Percentage operator -(Percentage a)
    parameters:
    - id: a
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The percentage to negate.
    return:
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: A new Percentage instance representing the negated value.
    content.vb: Public Shared Operator -(a As Percentage) As Percentage
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation*
  nameWithType.vb: Percentage.-(Percentage)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.-(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  name.vb: -(Percentage)
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  id: CompareTo(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: CompareTo(Percentage)
  nameWithType: Percentage.CompareTo(Percentage)
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo(ElectricDrill.SimpleRpgCore.Utils.Percentage)
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: CompareTo
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 87
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Compares the current Percentage instance with another Percentage instance.
  example: []
  syntax:
    content: public int CompareTo(Percentage other)
    parameters:
    - id: other
      type: ElectricDrill.SimpleRpgCore.Utils.Percentage
      description: The other percentage to compare to.
    return:
      type: System.Int32
      description: An integer indicating the relative order of the percentages.
    content.vb: Public Function CompareTo(other As Percentage) As Integer
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo*
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString
  id: ToString
  parent: ElectricDrill.SimpleRpgCore.Utils.Percentage
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: Percentage.ToString()
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString()
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/Percentage.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: ToString
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/Percentage.cs
    startLine: 97
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: Returns a string representation of the percentage value.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: A string representing the percentage value.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.Object.ToString
  overload: ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString*
references:
- uid: ElectricDrill.SimpleRpgCore.Utils
  commentId: N:ElectricDrill.SimpleRpgCore.Utils
  href: ElectricDrill.html
  name: ElectricDrill.SimpleRpgCore.Utils
  nameWithType: ElectricDrill.SimpleRpgCore.Utils
  fullName: ElectricDrill.SimpleRpgCore.Utils
  spec.csharp:
  - uid: ElectricDrill
    name: ElectricDrill
    href: ElectricDrill.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore
    name: SimpleRpgCore
    href: ElectricDrill.SimpleRpgCore.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore.Utils
    name: Utils
    href: ElectricDrill.SimpleRpgCore.Utils.html
  spec.vb:
  - uid: ElectricDrill
    name: ElectricDrill
    href: ElectricDrill.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore
    name: SimpleRpgCore
    href: ElectricDrill.SimpleRpgCore.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore.Utils
    name: Utils
    href: ElectricDrill.SimpleRpgCore.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.#ctor*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.#ctor
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage__ctor_System_Int64_
  name: Percentage
  nameWithType: Percentage.Percentage
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.Percentage
  nameWithType.vb: Percentage.New
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.New
  name.vb: New
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Implicit
  name: implicit operator
  nameWithType: Percentage.implicit operator
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.implicit operator
  nameWithType.vb: Percentage.CType
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage
  commentId: T:ElectricDrill.SimpleRpgCore.Utils.Percentage
  parent: ElectricDrill.SimpleRpgCore.Utils
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html
  name: Percentage
  nameWithType: Percentage
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Explicit*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Explicit
  name: explicit operator
  nameWithType: Percentage.explicit operator
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.explicit operator
  nameWithType.vb: Percentage.CType
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.CType
  name.vb: CType
  spec.csharp:
  - name: explicit
  - name: " "
  - name: operator
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_op_Addition_ElectricDrill_SimpleRpgCore_Utils_Percentage_ElectricDrill_SimpleRpgCore_Utils_Percentage_
  name: operator +
  nameWithType: Percentage.operator +
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.operator +
  nameWithType.vb: Percentage.+
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.+
  name.vb: +
  spec.csharp:
  - name: operator
  - name: " "
  - uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Addition*
    name: +
    href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_op_Addition_ElectricDrill_SimpleRpgCore_Utils_Percentage_ElectricDrill_SimpleRpgCore_Utils_Percentage_
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_op_Subtraction_ElectricDrill_SimpleRpgCore_Utils_Percentage_ElectricDrill_SimpleRpgCore_Utils_Percentage_
  name: operator -
  nameWithType: Percentage.operator -
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.operator -
  nameWithType.vb: Percentage.-
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_Subtraction*
    name: '-'
    href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_op_Subtraction_ElectricDrill_SimpleRpgCore_Utils_Percentage_ElectricDrill_SimpleRpgCore_Utils_Percentage_
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_op_UnaryNegation_ElectricDrill_SimpleRpgCore_Utils_Percentage_
  name: operator -
  nameWithType: Percentage.operator -
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.operator -
  nameWithType.vb: Percentage.-
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.Percentage.-
  name.vb: '-'
  spec.csharp:
  - name: operator
  - name: " "
  - uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.op_UnaryNegation*
    name: '-'
    href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_op_UnaryNegation_ElectricDrill_SimpleRpgCore_Utils_Percentage_
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_CompareTo_ElectricDrill_SimpleRpgCore_Utils_Percentage_
  name: CompareTo
  nameWithType: Percentage.CompareTo
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.CompareTo
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString
  href: ElectricDrill.SimpleRpgCore.Utils.Percentage.html#ElectricDrill_SimpleRpgCore_Utils_Percentage_ToString
  name: ToString
  nameWithType: Percentage.ToString
  fullName: ElectricDrill.SimpleRpgCore.Utils.Percentage.ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
