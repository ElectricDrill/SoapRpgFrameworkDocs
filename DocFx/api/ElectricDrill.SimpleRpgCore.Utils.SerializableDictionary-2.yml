### YamlMime:ManagedReference
items:
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  commentId: T:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  id: SerializableDictionary`2
  parent: ElectricDrill.SimpleRpgCore.Utils
  children:
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Clear
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.ContainsKey(`0)
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.GetEnumerator
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Item(`0)
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Keys
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnAfterDeserialize
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnBeforeSerialize
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.TryGetValue(`0,`1@)
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Values
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit(ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}
  - ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1}
  langs:
  - csharp
  - vb
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>
  type: Class
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: SerializableDictionary
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 7
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: >-
      [Serializable]

      public class SerializableDictionary<TKey, TValue>
    typeParameters:
    - id: TKey
    - id: TValue
    content.vb: >-
      <Serializable>

      Public Class SerializableDictionary(Of TKey, TValue)
  inheritance:
  - System.Object
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnBeforeSerialize
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnBeforeSerialize
  id: OnBeforeSerialize
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: OnBeforeSerialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.OnBeforeSerialize()
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: OnBeforeSerialize
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 16
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: <p>Implement this callback to transform data into serializable data types immediately before an object is serialized.</p>
  example: []
  syntax:
    content: public void OnBeforeSerialize()
    content.vb: Public Sub OnBeforeSerialize()
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnBeforeSerialize*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize()
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnAfterDeserialize
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnAfterDeserialize
  id: OnAfterDeserialize
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: OnAfterDeserialize()
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.OnAfterDeserialize()
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: OnAfterDeserialize
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 35
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  summary: <p>Implement this callback to transform data back into runtime data types after an object is deserialized.</p>
  example: []
  syntax:
    content: public void OnAfterDeserialize()
    content.vb: Public Sub OnAfterDeserialize()
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnAfterDeserialize*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize()
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.TryGetValue(`0,`1@)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.TryGetValue(`0,`1@)
  id: TryGetValue(`0,`1@)
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: TryGetValue(TKey, out TValue)
  nameWithType: SerializableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue)
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: TryGetValue
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 80
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public bool TryGetValue(TKey key, out TValue value)
    parameters:
    - id: key
      type: '{TKey}'
    - id: value
      type: '{TValue}'
    return:
      type: System.Boolean
    content.vb: Public Function TryGetValue(key As TKey, value As TValue) As Boolean
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.TryGetValue*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).TryGetValue(TKey, TValue)
  name.vb: TryGetValue(TKey, TValue)
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Item(`0)
  commentId: P:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Item(`0)
  id: Item(`0)
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: this[TKey]
  nameWithType: SerializableDictionary<TKey, TValue>.this[TKey]
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.this[TKey]
  type: Property
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: this[]
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 84
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public TValue this[TKey key] { get; set; }
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: '{TValue}'
    content.vb: Public Default Property this[](key As TKey) As TValue
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Item*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).this[](TKey)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).this[](TKey)
  name.vb: this[](TKey)
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Keys
  commentId: P:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Keys
  id: Keys
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Keys
  nameWithType: SerializableDictionary<TKey, TValue>.Keys
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.Keys
  type: Property
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: Keys
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 94
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public Dictionary<TKey, TValue>.KeyCollection Keys { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}.KeyCollection
    content.vb: Public ReadOnly Property Keys As Dictionary(Of TKey, TValue).KeyCollection
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Keys*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Keys
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).Keys
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Values
  commentId: P:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Values
  id: Values
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Values
  nameWithType: SerializableDictionary<TKey, TValue>.Values
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.Values
  type: Property
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: Values
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 95
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public Dictionary<TKey, TValue>.ValueCollection Values { get; }
    parameters: []
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}.ValueCollection
    content.vb: Public ReadOnly Property Values As Dictionary(Of TKey, TValue).ValueCollection
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Values*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Values
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).Values
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit(ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit(ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}
  id: op_Implicit(ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1})~System.Collections.Generic.Dictionary{`0,`1}
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: implicit operator Dictionary<TKey, TValue>(SerializableDictionary<TKey, TValue>)
  nameWithType: SerializableDictionary<TKey, TValue>.implicit operator Dictionary<TKey, TValue>(SerializableDictionary<TKey, TValue>)
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.implicit operator System.Collections.Generic.Dictionary<TKey, TValue>(ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Implicit
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 98
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public static implicit operator Dictionary<TKey, TValue>(SerializableDictionary<TKey, TValue> serializableDictionary)
    parameters:
    - id: serializableDictionary
      type: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
    return:
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    content.vb: Public Shared Widening Operator CType(serializableDictionary As SerializableDictionary(Of TKey, TValue)) As Dictionary(Of TKey, TValue)
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).CType(SerializableDictionary(Of TKey, TValue))
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).CType(ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue))
  name.vb: CType(SerializableDictionary(Of TKey, TValue))
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1}
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1}
  id: op_Implicit(System.Collections.Generic.Dictionary{`0,`1})~ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary{`0,`1}
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: implicit operator SerializableDictionary<TKey, TValue>(Dictionary<TKey, TValue>)
  nameWithType: SerializableDictionary<TKey, TValue>.implicit operator SerializableDictionary<TKey, TValue>(Dictionary<TKey, TValue>)
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.implicit operator ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>(System.Collections.Generic.Dictionary<TKey, TValue>)
  type: Operator
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: op_Implicit
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 103
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public static implicit operator SerializableDictionary<TKey, TValue>(Dictionary<TKey, TValue> dictionary)
    parameters:
    - id: dictionary
      type: System.Collections.Generic.Dictionary{{TKey},{TValue}}
    return:
      type: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
    content.vb: Public Shared Widening Operator CType(dictionary As Dictionary(Of TKey, TValue)) As SerializableDictionary(Of TKey, TValue)
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).CType(Dictionary(Of TKey, TValue))
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).CType(System.Collections.Generic.Dictionary(Of TKey, TValue))
  name.vb: CType(Dictionary(Of TKey, TValue))
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Clear
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Clear
  id: Clear
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: SerializableDictionary<TKey, TValue>.Clear()
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.Clear()
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: Clear
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 107
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Clear*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Clear()
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).Clear()
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.ContainsKey(`0)
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.ContainsKey(`0)
  id: ContainsKey(`0)
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: ContainsKey(TKey)
  nameWithType: SerializableDictionary<TKey, TValue>.ContainsKey(TKey)
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.ContainsKey(TKey)
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: ContainsKey
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 113
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  syntax:
    content: public bool ContainsKey(TKey key)
    parameters:
    - id: key
      type: '{TKey}'
    return:
      type: System.Boolean
    content.vb: Public Function ContainsKey(key As TKey) As Boolean
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.ContainsKey*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).ContainsKey(TKey)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).ContainsKey(TKey)
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.GetEnumerator
  commentId: M:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.GetEnumerator
  id: GetEnumerator
  parent: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: SerializableDictionary<TKey, TValue>.GetEnumerator()
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.GetEnumerator()
  type: Method
  source:
    remote:
      path: Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
      branch: main
      repo: https://github.com/Cis8/SoapRpgFramework
    id: GetEnumerator
    path: ../../GeometricalInvaders/Packages/SimpleRPGCore/Runtime/SimpleRpgCore/Utils/SerializableDictionary.cs
    startLine: 117
  assemblies:
  - ElectricDrill.SimpleRPGCore.Runtime
  namespace: ElectricDrill.SimpleRpgCore.Utils
  example: []
  syntax:
    content: public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator()
    return:
      type: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
    content.vb: Public Function GetEnumerator() As IEnumerator(Of KeyValuePair(Of TKey, TValue))
  overload: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.GetEnumerator*
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).GetEnumerator()
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).GetEnumerator()
references:
- uid: ElectricDrill.SimpleRpgCore.Utils
  commentId: N:ElectricDrill.SimpleRpgCore.Utils
  href: ElectricDrill.html
  name: ElectricDrill.SimpleRpgCore.Utils
  nameWithType: ElectricDrill.SimpleRpgCore.Utils
  fullName: ElectricDrill.SimpleRpgCore.Utils
  spec.csharp:
  - uid: ElectricDrill
    name: ElectricDrill
    href: ElectricDrill.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore
    name: SimpleRpgCore
    href: ElectricDrill.SimpleRpgCore.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore.Utils
    name: Utils
    href: ElectricDrill.SimpleRpgCore.Utils.html
  spec.vb:
  - uid: ElectricDrill
    name: ElectricDrill
    href: ElectricDrill.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore
    name: SimpleRpgCore
    href: ElectricDrill.SimpleRpgCore.html
  - name: .
  - uid: ElectricDrill.SimpleRpgCore.Utils
    name: Utils
    href: ElectricDrill.SimpleRpgCore.Utils.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnBeforeSerialize*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnBeforeSerialize
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_OnBeforeSerialize
  name: OnBeforeSerialize
  nameWithType: SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.OnBeforeSerialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).OnBeforeSerialize
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnAfterDeserialize*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.OnAfterDeserialize
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_OnAfterDeserialize
  name: OnAfterDeserialize
  nameWithType: SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.OnAfterDeserialize
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).OnAfterDeserialize
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.TryGetValue*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.TryGetValue
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_TryGetValue__0__1__
  name: TryGetValue
  nameWithType: SerializableDictionary<TKey, TValue>.TryGetValue
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.TryGetValue
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).TryGetValue
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).TryGetValue
- uid: '{TKey}'
  commentId: '!:TKey'
  definition: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: '{TValue}'
  commentId: '!:TValue'
  definition: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TKey
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: TValue
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Item*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Item
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_Item__0_
  name: this
  nameWithType: SerializableDictionary<TKey, TValue>.this
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.this
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).this[]
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).this[]
  name.vb: this[]
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Keys*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Keys
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_Keys
  name: Keys
  nameWithType: SerializableDictionary<TKey, TValue>.Keys
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.Keys
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Keys
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).Keys
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}.KeyCollection
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}.KeyCollection
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2.KeyCollection
  name: Dictionary<TKey, TValue>.KeyCollection
  nameWithType: Dictionary<TKey, TValue>.KeyCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection
  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection
  name.vb: Dictionary(Of TKey, TValue).KeyCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary{`0,`1}.KeyCollection
    name: KeyCollection
    isExternal: true
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary{`0,`1}.KeyCollection
    name: KeyCollection
    isExternal: true
- uid: System.Collections.Generic.Dictionary`2.KeyCollection
  commentId: T:System.Collections.Generic.Dictionary`2.KeyCollection
  isExternal: true
  name: Dictionary<TKey, TValue>.KeyCollection
  nameWithType: Dictionary<TKey, TValue>.KeyCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.KeyCollection
  nameWithType.vb: Dictionary(Of TKey, TValue).KeyCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).KeyCollection
  name.vb: Dictionary(Of TKey, TValue).KeyCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary`2.KeyCollection
    name: KeyCollection
    isExternal: true
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary`2.KeyCollection
    name: KeyCollection
    isExternal: true
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Values*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Values
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_Values
  name: Values
  nameWithType: SerializableDictionary<TKey, TValue>.Values
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.Values
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Values
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).Values
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}.ValueCollection
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}.ValueCollection
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2.ValueCollection
  name: Dictionary<TKey, TValue>.ValueCollection
  nameWithType: Dictionary<TKey, TValue>.ValueCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection
  name.vb: Dictionary(Of TKey, TValue).ValueCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary{`0,`1}.ValueCollection
    name: ValueCollection
    isExternal: true
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary{`0,`1}.ValueCollection
    name: ValueCollection
    isExternal: true
- uid: System.Collections.Generic.Dictionary`2.ValueCollection
  commentId: T:System.Collections.Generic.Dictionary`2.ValueCollection
  isExternal: true
  name: Dictionary<TKey, TValue>.ValueCollection
  nameWithType: Dictionary<TKey, TValue>.ValueCollection
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>.ValueCollection
  nameWithType.vb: Dictionary(Of TKey, TValue).ValueCollection
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue).ValueCollection
  name.vb: Dictionary(Of TKey, TValue).ValueCollection
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: .
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection
    name: ValueCollection
    isExternal: true
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: .
  - uid: System.Collections.Generic.Dictionary`2.ValueCollection
    name: ValueCollection
    isExternal: true
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.op_Implicit
  name: implicit operator
  nameWithType: SerializableDictionary<TKey, TValue>.implicit operator
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.implicit operator
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).CType
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  commentId: T:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
  parent: ElectricDrill.SimpleRpgCore.Utils
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html
  name: SerializableDictionary<TKey, TValue>
  nameWithType: SerializableDictionary<TKey, TValue>
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>
  nameWithType.vb: SerializableDictionary(Of TKey, TValue)
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue)
  name.vb: SerializableDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
    name: SerializableDictionary
    href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2
    name: SerializableDictionary
    href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary{{TKey},{TValue}}
  commentId: T:System.Collections.Generic.Dictionary{`0,`1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Clear*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.Clear
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_Clear
  name: Clear
  nameWithType: SerializableDictionary<TKey, TValue>.Clear
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.Clear
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).Clear
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).Clear
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.ContainsKey*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.ContainsKey
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_ContainsKey__0_
  name: ContainsKey
  nameWithType: SerializableDictionary<TKey, TValue>.ContainsKey
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.ContainsKey
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).ContainsKey
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).ContainsKey
- uid: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.GetEnumerator*
  commentId: Overload:ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary`2.GetEnumerator
  href: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary-2.html#ElectricDrill_SimpleRpgCore_Utils_SerializableDictionary_2_GetEnumerator
  name: GetEnumerator
  nameWithType: SerializableDictionary<TKey, TValue>.GetEnumerator
  fullName: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary<TKey, TValue>.GetEnumerator
  nameWithType.vb: SerializableDictionary(Of TKey, TValue).GetEnumerator
  fullName.vb: ElectricDrill.SimpleRpgCore.Utils.SerializableDictionary(Of TKey, TValue).GetEnumerator
- uid: System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{{TKey},{TValue}}}
  commentId: T:System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{`0,`1}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<KeyValuePair<TKey, TValue>>
  nameWithType: IEnumerator<KeyValuePair<TKey, TValue>>
  fullName: System.Collections.Generic.IEnumerator<System.Collections.Generic.KeyValuePair<TKey, TValue>>
  nameWithType.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  fullName.vb: System.Collections.Generic.IEnumerator(Of System.Collections.Generic.KeyValuePair(Of TKey, TValue))
  name.vb: IEnumerator(Of KeyValuePair(Of TKey, TValue))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
  - name: )
- uid: System.Collections.Generic.IEnumerator`1
  commentId: T:System.Collections.Generic.IEnumerator`1
  isExternal: true
  name: IEnumerator<T>
  nameWithType: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  nameWithType.vb: IEnumerator(Of T)
  fullName.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
